
CubeProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d14  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08004eb4  08004eb4  00014eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fb4  08004fb4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004fb4  08004fb4  00014fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fbc  08004fbc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fbc  08004fbc  00014fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fc0  08004fc0  00014fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004fc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  20000074  08005038  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08005038  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001156f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002223  00000000  00000000  00031613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  00033838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d40  00000000  00000000  00034640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ada  00000000  00000000  00035380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fdb9  00000000  00000000  0004de5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b680  00000000  00000000  0005dc13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f9293  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042ec  00000000  00000000  000f92e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004e9c 	.word	0x08004e9c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08004e9c 	.word	0x08004e9c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057c:	f000 fd5a 	bl	8001034 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000580:	f000 f84c 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000584:	f000 f9fc 	bl	8000980 <MX_GPIO_Init>
  MX_DMA_Init();
 8000588:	f000 f9da 	bl	8000940 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800058c:	f000 f9ae 	bl	80008ec <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000590:	f000 f8ae 	bl	80006f0 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000594:	f000 f8fe 	bl	8000794 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000598:	f000 f952 	bl	8000840 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // Timer Initialization
  HAL_TIM_Base_Start(&htim2);
 800059c:	4814      	ldr	r0, [pc, #80]	; (80005f0 <main+0x78>)
 800059e:	f002 fced 	bl	8002f7c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 80005a2:	4814      	ldr	r0, [pc, #80]	; (80005f4 <main+0x7c>)
 80005a4:	f002 fd44 	bl	8003030 <HAL_TIM_Base_Start_IT>
  // Circular sampling from 1 channel every 1ms
  HAL_ADC_Start_DMA(&hadc1, &lightRaw, 1);
 80005a8:	2201      	movs	r2, #1
 80005aa:	4913      	ldr	r1, [pc, #76]	; (80005f8 <main+0x80>)
 80005ac:	4813      	ldr	r0, [pc, #76]	; (80005fc <main+0x84>)
 80005ae:	f000 fe1b 	bl	80011e8 <HAL_ADC_Start_DMA>
  VirtualTimer_Init(&wakeupTimer);
 80005b2:	4813      	ldr	r0, [pc, #76]	; (8000600 <main+0x88>)
 80005b4:	f000 fa60 	bl	8000a78 <VirtualTimer_Init>
  printf("Setup successful! \n\r");
 80005b8:	4812      	ldr	r0, [pc, #72]	; (8000604 <main+0x8c>)
 80005ba:	f003 fd19 	bl	8003ff0 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(1000);
 80005be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005c2:	f000 fda9 	bl	8001118 <HAL_Delay>
	  printf("LIGHT: %ld\n\r", lightRaw);
 80005c6:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <main+0x80>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4619      	mov	r1, r3
 80005cc:	480e      	ldr	r0, [pc, #56]	; (8000608 <main+0x90>)
 80005ce:	f003 fd0f 	bl	8003ff0 <iprintf>
	  printf("MOTION: %d\n\r", (uint16_t)motion);
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <main+0x94>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	4619      	mov	r1, r3
 80005da:	480d      	ldr	r0, [pc, #52]	; (8000610 <main+0x98>)
 80005dc:	f003 fd08 	bl	8003ff0 <iprintf>
	  printf("WAKEUP: %d\n\r", (uint16_t)systemState);
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <main+0x9c>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	4619      	mov	r1, r3
 80005e8:	480b      	ldr	r0, [pc, #44]	; (8000618 <main+0xa0>)
 80005ea:	f003 fd01 	bl	8003ff0 <iprintf>
	  HAL_Delay(1000);
 80005ee:	e7e6      	b.n	80005be <main+0x46>
 80005f0:	200001a4 	.word	0x200001a4
 80005f4:	200000a4 	.word	0x200000a4
 80005f8:	20000090 	.word	0x20000090
 80005fc:	200000ec 	.word	0x200000ec
 8000600:	20000134 	.word	0x20000134
 8000604:	08004eb4 	.word	0x08004eb4
 8000608:	08004ecc 	.word	0x08004ecc
 800060c:	20000094 	.word	0x20000094
 8000610:	08004edc 	.word	0x08004edc
 8000614:	20000000 	.word	0x20000000
 8000618:	08004eec 	.word	0x08004eec

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f003 fcd8 	bl	8003fe0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <SystemClock_Config+0xcc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a27      	ldr	r2, [pc, #156]	; (80006e8 <SystemClock_Config+0xcc>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b25      	ldr	r3, [pc, #148]	; (80006e8 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b22      	ldr	r3, [pc, #136]	; (80006ec <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemClock_Config+0xd0>)
 8000666:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	2310      	movs	r3, #16
 8000682:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800068c:	2310      	movs	r3, #16
 800068e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000690:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000694:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000696:	2304      	movs	r3, #4
 8000698:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800069a:	2304      	movs	r3, #4
 800069c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 ffa6 	bl	80025f4 <HAL_RCC_OscConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006ae:	f000 fa73 	bl	8000b98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b2:	230f      	movs	r3, #15
 80006b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b6:	2302      	movs	r3, #2
 80006b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2102      	movs	r1, #2
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 fa08 	bl	8002ae4 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006da:	f000 fa5d 	bl	8000b98 <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	3750      	adds	r7, #80	; 0x50
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006f6:	463b      	mov	r3, r7
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <MX_ADC1_Init+0x9c>)
 8000704:	4a22      	ldr	r2, [pc, #136]	; (8000790 <MX_ADC1_Init+0xa0>)
 8000706:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000708:	4b20      	ldr	r3, [pc, #128]	; (800078c <MX_ADC1_Init+0x9c>)
 800070a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800070e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000710:	4b1e      	ldr	r3, [pc, #120]	; (800078c <MX_ADC1_Init+0x9c>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000716:	4b1d      	ldr	r3, [pc, #116]	; (800078c <MX_ADC1_Init+0x9c>)
 8000718:	2201      	movs	r2, #1
 800071a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800071c:	4b1b      	ldr	r3, [pc, #108]	; (800078c <MX_ADC1_Init+0x9c>)
 800071e:	2200      	movs	r2, #0
 8000720:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000722:	4b1a      	ldr	r3, [pc, #104]	; (800078c <MX_ADC1_Init+0x9c>)
 8000724:	2200      	movs	r2, #0
 8000726:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800072a:	4b18      	ldr	r3, [pc, #96]	; (800078c <MX_ADC1_Init+0x9c>)
 800072c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000730:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_ADC1_Init+0x9c>)
 8000734:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000738:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_ADC1_Init+0x9c>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_ADC1_Init+0x9c>)
 8000742:	2201      	movs	r2, #1
 8000744:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_ADC1_Init+0x9c>)
 8000748:	2201      	movs	r2, #1
 800074a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800074e:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_ADC1_Init+0x9c>)
 8000750:	2201      	movs	r2, #1
 8000752:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000754:	480d      	ldr	r0, [pc, #52]	; (800078c <MX_ADC1_Init+0x9c>)
 8000756:	f000 fd03 	bl	8001160 <HAL_ADC_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000760:	f000 fa1a 	bl	8000b98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000764:	2308      	movs	r3, #8
 8000766:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000768:	2301      	movs	r3, #1
 800076a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800076c:	2300      	movs	r3, #0
 800076e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000770:	463b      	mov	r3, r7
 8000772:	4619      	mov	r1, r3
 8000774:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_ADC1_Init+0x9c>)
 8000776:	f000 fe3b 	bl	80013f0 <HAL_ADC_ConfigChannel>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000780:	f000 fa0a 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	200000ec 	.word	0x200000ec
 8000790:	40012000 	.word	0x40012000

08000794 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800079a:	f107 0308 	add.w	r3, r7, #8
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a8:	463b      	mov	r3, r7
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */
 // 1ms triggering
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007b0:	4b21      	ldr	r3, [pc, #132]	; (8000838 <MX_TIM2_Init+0xa4>)
 80007b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 80007b8:	4b1f      	ldr	r3, [pc, #124]	; (8000838 <MX_TIM2_Init+0xa4>)
 80007ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c0:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <MX_TIM2_Init+0xa4>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = HAL_RCC_GetPCLK2Freq() / 1000000 - 1;
 80007c6:	f002 fb75 	bl	8002eb4 <HAL_RCC_GetPCLK2Freq>
 80007ca:	4603      	mov	r3, r0
 80007cc:	4a1b      	ldr	r2, [pc, #108]	; (800083c <MX_TIM2_Init+0xa8>)
 80007ce:	fba2 2303 	umull	r2, r3, r2, r3
 80007d2:	0c9b      	lsrs	r3, r3, #18
 80007d4:	3b01      	subs	r3, #1
 80007d6:	4a18      	ldr	r2, [pc, #96]	; (8000838 <MX_TIM2_Init+0xa4>)
 80007d8:	60d3      	str	r3, [r2, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007da:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_TIM2_Init+0xa4>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e0:	4b15      	ldr	r3, [pc, #84]	; (8000838 <MX_TIM2_Init+0xa4>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007e6:	4814      	ldr	r0, [pc, #80]	; (8000838 <MX_TIM2_Init+0xa4>)
 80007e8:	f002 fb78 	bl	8002edc <HAL_TIM_Base_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80007f2:	f000 f9d1 	bl	8000b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007fc:	f107 0308 	add.w	r3, r7, #8
 8000800:	4619      	mov	r1, r3
 8000802:	480d      	ldr	r0, [pc, #52]	; (8000838 <MX_TIM2_Init+0xa4>)
 8000804:	f002 fd7e 	bl	8003304 <HAL_TIM_ConfigClockSource>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800080e:	f000 f9c3 	bl	8000b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000812:	2320      	movs	r3, #32
 8000814:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800081a:	463b      	mov	r3, r7
 800081c:	4619      	mov	r1, r3
 800081e:	4806      	ldr	r0, [pc, #24]	; (8000838 <MX_TIM2_Init+0xa4>)
 8000820:	f002 ff7a 	bl	8003718 <HAL_TIMEx_MasterConfigSynchronization>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800082a:	f000 f9b5 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	3718      	adds	r7, #24
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200001a4 	.word	0x200001a4
 800083c:	431bde83 	.word	0x431bde83

08000840 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000846:	f107 0308 	add.w	r3, r7, #8
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000854:	463b      	mov	r3, r7
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800085c:	4b20      	ldr	r3, [pc, #128]	; (80008e0 <MX_TIM3_Init+0xa0>)
 800085e:	4a21      	ldr	r2, [pc, #132]	; (80008e4 <MX_TIM3_Init+0xa4>)
 8000860:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000;
 8000862:	4b1f      	ldr	r3, [pc, #124]	; (80008e0 <MX_TIM3_Init+0xa0>)
 8000864:	f242 7210 	movw	r2, #10000	; 0x2710
 8000868:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086a:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <MX_TIM3_Init+0xa0>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = HAL_RCC_GetPCLK2Freq() / 10000 - 1;
 8000870:	f002 fb20 	bl	8002eb4 <HAL_RCC_GetPCLK2Freq>
 8000874:	4603      	mov	r3, r0
 8000876:	4a1c      	ldr	r2, [pc, #112]	; (80008e8 <MX_TIM3_Init+0xa8>)
 8000878:	fba2 2303 	umull	r2, r3, r2, r3
 800087c:	0b5b      	lsrs	r3, r3, #13
 800087e:	3b01      	subs	r3, #1
 8000880:	4a17      	ldr	r2, [pc, #92]	; (80008e0 <MX_TIM3_Init+0xa0>)
 8000882:	60d3      	str	r3, [r2, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000884:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <MX_TIM3_Init+0xa0>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <MX_TIM3_Init+0xa0>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000890:	4813      	ldr	r0, [pc, #76]	; (80008e0 <MX_TIM3_Init+0xa0>)
 8000892:	f002 fb23 	bl	8002edc <HAL_TIM_Base_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 800089c:	f000 f97c 	bl	8000b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008a6:	f107 0308 	add.w	r3, r7, #8
 80008aa:	4619      	mov	r1, r3
 80008ac:	480c      	ldr	r0, [pc, #48]	; (80008e0 <MX_TIM3_Init+0xa0>)
 80008ae:	f002 fd29 	bl	8003304 <HAL_TIM_ConfigClockSource>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80008b8:	f000 f96e 	bl	8000b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008bc:	2320      	movs	r3, #32
 80008be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008c4:	463b      	mov	r3, r7
 80008c6:	4619      	mov	r1, r3
 80008c8:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_TIM3_Init+0xa0>)
 80008ca:	f002 ff25 	bl	8003718 <HAL_TIMEx_MasterConfigSynchronization>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80008d4:	f000 f960 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008d8:	bf00      	nop
 80008da:	3718      	adds	r7, #24
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	200000a4 	.word	0x200000a4
 80008e4:	40000400 	.word	0x40000400
 80008e8:	d1b71759 	.word	0xd1b71759

080008ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 80008f2:	4a12      	ldr	r2, [pc, #72]	; (800093c <MX_USART2_UART_Init+0x50>)
 80008f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 80008f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 8000924:	f002 ff7a 	bl	800381c <HAL_UART_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800092e:	f000 f933 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200001ec 	.word	0x200001ec
 800093c:	40004400 	.word	0x40004400

08000940 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	4b0c      	ldr	r3, [pc, #48]	; (800097c <MX_DMA_Init+0x3c>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a0b      	ldr	r2, [pc, #44]	; (800097c <MX_DMA_Init+0x3c>)
 8000950:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_DMA_Init+0x3c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2100      	movs	r1, #0
 8000966:	2038      	movs	r0, #56	; 0x38
 8000968:	f001 f8cd 	bl	8001b06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800096c:	2038      	movs	r0, #56	; 0x38
 800096e:	f001 f8e6 	bl	8001b3e <HAL_NVIC_EnableIRQ>

}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800

08000980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	; 0x28
 8000984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	4b34      	ldr	r3, [pc, #208]	; (8000a6c <MX_GPIO_Init+0xec>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a33      	ldr	r2, [pc, #204]	; (8000a6c <MX_GPIO_Init+0xec>)
 80009a0:	f043 0304 	orr.w	r3, r3, #4
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b31      	ldr	r3, [pc, #196]	; (8000a6c <MX_GPIO_Init+0xec>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0304 	and.w	r3, r3, #4
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	4b2d      	ldr	r3, [pc, #180]	; (8000a6c <MX_GPIO_Init+0xec>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a2c      	ldr	r2, [pc, #176]	; (8000a6c <MX_GPIO_Init+0xec>)
 80009bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b2a      	ldr	r3, [pc, #168]	; (8000a6c <MX_GPIO_Init+0xec>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	60bb      	str	r3, [r7, #8]
 80009d2:	4b26      	ldr	r3, [pc, #152]	; (8000a6c <MX_GPIO_Init+0xec>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a25      	ldr	r2, [pc, #148]	; (8000a6c <MX_GPIO_Init+0xec>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b23      	ldr	r3, [pc, #140]	; (8000a6c <MX_GPIO_Init+0xec>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	4b1f      	ldr	r3, [pc, #124]	; (8000a6c <MX_GPIO_Init+0xec>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a1e      	ldr	r2, [pc, #120]	; (8000a6c <MX_GPIO_Init+0xec>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <MX_GPIO_Init+0xec>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2120      	movs	r1, #32
 8000a0a:	4819      	ldr	r0, [pc, #100]	; (8000a70 <MX_GPIO_Init+0xf0>)
 8000a0c:	f001 fdbe 	bl	800258c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a16:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4619      	mov	r1, r3
 8000a26:	4813      	ldr	r0, [pc, #76]	; (8000a74 <MX_GPIO_Init+0xf4>)
 8000a28:	f001 fc14 	bl	8002254 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a2c:	2320      	movs	r3, #32
 8000a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a30:	2301      	movs	r3, #1
 8000a32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4619      	mov	r1, r3
 8000a42:	480b      	ldr	r0, [pc, #44]	; (8000a70 <MX_GPIO_Init+0xf0>)
 8000a44:	f001 fc06 	bl	8002254 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4805      	ldr	r0, [pc, #20]	; (8000a74 <MX_GPIO_Init+0xf4>)
 8000a5e:	f001 fbf9 	bl	8002254 <HAL_GPIO_Init>

}
 8000a62:	bf00      	nop
 8000a64:	3728      	adds	r7, #40	; 0x28
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020000 	.word	0x40020000
 8000a74:	40020800 	.word	0x40020800

08000a78 <VirtualTimer_Init>:

/* USER CODE BEGIN 4 */

void VirtualTimer_Init(VIRTUAL_TIMER *vtim){
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	vtim ->state = ACTIVE;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2201      	movs	r2, #1
 8000a84:	701a      	strb	r2, [r3, #0]
	vtim ->target = (uint32_t)WAKEUP_TIME;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	220a      	movs	r2, #10
 8000a8a:	609a      	str	r2, [r3, #8]
	vtim ->flag = 0;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	731a      	strb	r2, [r3, #12]
	vtim ->current = 0;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2200      	movs	r2, #0
 8000a96:	605a      	str	r2, [r3, #4]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <VirtualTimer_Increment>:
void VirtualTimer_Increment(VIRTUAL_TIMER *vtim){
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	if((vtim ->current) < (vtim ->target)){
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	685a      	ldr	r2, [r3, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	689b      	ldr	r3, [r3, #8]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d205      	bcs.n	8000ac4 <VirtualTimer_Increment+0x20>
		vtim ->current++;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	1c5a      	adds	r2, r3, #1
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	605a      	str	r2, [r3, #4]
	}
	else{
		vtim ->current = 0;
		vtim ->flag = 1;
	}
}
 8000ac2:	e005      	b.n	8000ad0 <VirtualTimer_Increment+0x2c>
		vtim ->current = 0;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	605a      	str	r2, [r3, #4]
		vtim ->flag = 1;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2201      	movs	r2, #1
 8000ace:	731a      	strb	r2, [r3, #12]
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <VirtualTimer_Restart>:
void VirtualTimer_Restart(VIRTUAL_TIMER *vtim){
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	vtim ->current = 0;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	605a      	str	r2, [r3, #4]
	vtim ->flag = 0;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2200      	movs	r2, #0
 8000aee:	731a      	strb	r2, [r3, #12]
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <VirtualTimer_Finished>:
uint8_t VirtualTimer_Finished(VIRTUAL_TIMER *vtim){
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
	return (vtim ->flag);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	7b1b      	ldrb	r3, [r3, #12]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <HAL_ADC_ConvCpltCallback>:

	vtim ->current = 0;
}

// Used to check sampling frequency
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]

	// Sample motion sensor at same rate than
	//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);

}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <HAL_TIM_PeriodElapsedCallback>:
*	Description:	Callback when Tim3 interrupt occurs.
*	Parameters:		TIM_HandleTypeDef* htim: timer handler
*	Returns:		void
---------------------------------------------------------------------------*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // debugging
 8000b30:	2120      	movs	r1, #32
 8000b32:	4814      	ldr	r0, [pc, #80]	; (8000b84 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000b34:	f001 fd43 	bl	80025be <HAL_GPIO_TogglePin>


	// Sample of motion sensor (always more than a second)
	motion = HAL_GPIO_ReadPin(MOTION_SENSOR_PORT, MOTION_SENSOR_PIN);
 8000b38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b3c:	4812      	ldr	r0, [pc, #72]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000b3e:	f001 fd0d 	bl	800255c <HAL_GPIO_ReadPin>
 8000b42:	4603      	mov	r3, r0
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000b48:	701a      	strb	r2, [r3, #0]
	// A second has passed
	VirtualTimer_Increment(&wakeupTimer);
 8000b4a:	4811      	ldr	r0, [pc, #68]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000b4c:	f7ff ffaa 	bl	8000aa4 <VirtualTimer_Increment>
	// Feed the wakeup timer if there is movement
	if (motion){
 8000b50:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d006      	beq.n	8000b68 <HAL_TIM_PeriodElapsedCallback+0x40>
		VirtualTimer_Restart(&wakeupTimer);
 8000b5a:	480d      	ldr	r0, [pc, #52]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000b5c:	f7ff ffbe 	bl	8000adc <VirtualTimer_Restart>
		systemState = ACTIVE;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	701a      	strb	r2, [r3, #0]
	else if(VirtualTimer_Finished(&wakeupTimer)){
		systemState = INACTIVE;
	}


}
 8000b66:	e008      	b.n	8000b7a <HAL_TIM_PeriodElapsedCallback+0x52>
	else if(VirtualTimer_Finished(&wakeupTimer)){
 8000b68:	4809      	ldr	r0, [pc, #36]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000b6a:	f7ff ffc7 	bl	8000afc <VirtualTimer_Finished>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d002      	beq.n	8000b7a <HAL_TIM_PeriodElapsedCallback+0x52>
		systemState = INACTIVE;
 8000b74:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	701a      	strb	r2, [r3, #0]
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40020000 	.word	0x40020000
 8000b88:	40020800 	.word	0x40020800
 8000b8c:	20000094 	.word	0x20000094
 8000b90:	20000134 	.word	0x20000134
 8000b94:	20000000 	.word	0x20000000

08000b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9c:	b672      	cpsid	i
}
 8000b9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <Error_Handler+0x8>
	...

08000ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb2:	4a0f      	ldr	r2, [pc, #60]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bba:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	603b      	str	r3, [r7, #0]
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	4a08      	ldr	r2, [pc, #32]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <HAL_MspInit+0x4c>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000be2:	2007      	movs	r0, #7
 8000be4:	f000 ff84 	bl	8001af0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be8:	bf00      	nop
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40023800 	.word	0x40023800

08000bf4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	; 0x28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a2f      	ldr	r2, [pc, #188]	; (8000cd0 <HAL_ADC_MspInit+0xdc>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d157      	bne.n	8000cc6 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	4b2e      	ldr	r3, [pc, #184]	; (8000cd4 <HAL_ADC_MspInit+0xe0>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	4a2d      	ldr	r2, [pc, #180]	; (8000cd4 <HAL_ADC_MspInit+0xe0>)
 8000c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c24:	6453      	str	r3, [r2, #68]	; 0x44
 8000c26:	4b2b      	ldr	r3, [pc, #172]	; (8000cd4 <HAL_ADC_MspInit+0xe0>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	4b27      	ldr	r3, [pc, #156]	; (8000cd4 <HAL_ADC_MspInit+0xe0>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a26      	ldr	r2, [pc, #152]	; (8000cd4 <HAL_ADC_MspInit+0xe0>)
 8000c3c:	f043 0302 	orr.w	r3, r3, #2
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b24      	ldr	r3, [pc, #144]	; (8000cd4 <HAL_ADC_MspInit+0xe0>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c52:	2303      	movs	r3, #3
 8000c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	481d      	ldr	r0, [pc, #116]	; (8000cd8 <HAL_ADC_MspInit+0xe4>)
 8000c62:	f001 faf7 	bl	8002254 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c66:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <HAL_ADC_MspInit+0xe8>)
 8000c68:	4a1d      	ldr	r2, [pc, #116]	; (8000ce0 <HAL_ADC_MspInit+0xec>)
 8000c6a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c6c:	4b1b      	ldr	r3, [pc, #108]	; (8000cdc <HAL_ADC_MspInit+0xe8>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c72:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <HAL_ADC_MspInit+0xe8>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c78:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <HAL_ADC_MspInit+0xe8>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c7e:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <HAL_ADC_MspInit+0xe8>)
 8000c80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c84:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <HAL_ADC_MspInit+0xe8>)
 8000c88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c8c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c8e:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <HAL_ADC_MspInit+0xe8>)
 8000c90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c94:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c96:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <HAL_ADC_MspInit+0xe8>)
 8000c98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c9c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <HAL_ADC_MspInit+0xe8>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ca4:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <HAL_ADC_MspInit+0xe8>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000caa:	480c      	ldr	r0, [pc, #48]	; (8000cdc <HAL_ADC_MspInit+0xe8>)
 8000cac:	f000 ff62 	bl	8001b74 <HAL_DMA_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000cb6:	f7ff ff6f 	bl	8000b98 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a07      	ldr	r2, [pc, #28]	; (8000cdc <HAL_ADC_MspInit+0xe8>)
 8000cbe:	639a      	str	r2, [r3, #56]	; 0x38
 8000cc0:	4a06      	ldr	r2, [pc, #24]	; (8000cdc <HAL_ADC_MspInit+0xe8>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cc6:	bf00      	nop
 8000cc8:	3728      	adds	r7, #40	; 0x28
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40012000 	.word	0x40012000
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40020400 	.word	0x40020400
 8000cdc:	20000144 	.word	0x20000144
 8000ce0:	40026410 	.word	0x40026410

08000ce4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cf4:	d10e      	bne.n	8000d14 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <HAL_TIM_Base_MspInit+0x70>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	4a15      	ldr	r2, [pc, #84]	; (8000d54 <HAL_TIM_Base_MspInit+0x70>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6413      	str	r3, [r2, #64]	; 0x40
 8000d06:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <HAL_TIM_Base_MspInit+0x70>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d12:	e01a      	b.n	8000d4a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a0f      	ldr	r2, [pc, #60]	; (8000d58 <HAL_TIM_Base_MspInit+0x74>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d115      	bne.n	8000d4a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <HAL_TIM_Base_MspInit+0x70>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	4a0b      	ldr	r2, [pc, #44]	; (8000d54 <HAL_TIM_Base_MspInit+0x70>)
 8000d28:	f043 0302 	orr.w	r3, r3, #2
 8000d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <HAL_TIM_Base_MspInit+0x70>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	201d      	movs	r0, #29
 8000d40:	f000 fee1 	bl	8001b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d44:	201d      	movs	r0, #29
 8000d46:	f000 fefa 	bl	8001b3e <HAL_NVIC_EnableIRQ>
}
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40000400 	.word	0x40000400

08000d5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	; 0x28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a19      	ldr	r2, [pc, #100]	; (8000de0 <HAL_UART_MspInit+0x84>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d12b      	bne.n	8000dd6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
 8000d82:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <HAL_UART_MspInit+0x88>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	4a17      	ldr	r2, [pc, #92]	; (8000de4 <HAL_UART_MspInit+0x88>)
 8000d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <HAL_UART_MspInit+0x88>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <HAL_UART_MspInit+0x88>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a10      	ldr	r2, [pc, #64]	; (8000de4 <HAL_UART_MspInit+0x88>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <HAL_UART_MspInit+0x88>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000db6:	230c      	movs	r3, #12
 8000db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dc6:	2307      	movs	r3, #7
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4805      	ldr	r0, [pc, #20]	; (8000de8 <HAL_UART_MspInit+0x8c>)
 8000dd2:	f001 fa3f 	bl	8002254 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dd6:	bf00      	nop
 8000dd8:	3728      	adds	r7, #40	; 0x28
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40004400 	.word	0x40004400
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40020000 	.word	0x40020000

08000dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <NMI_Handler+0x4>

08000df2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <HardFault_Handler+0x4>

08000df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <MemManage_Handler+0x4>

08000dfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <BusFault_Handler+0x4>

08000e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <UsageFault_Handler+0x4>

08000e0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e38:	f000 f94e 	bl	80010d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e44:	4802      	ldr	r0, [pc, #8]	; (8000e50 <TIM3_IRQHandler+0x10>)
 8000e46:	f002 f955 	bl	80030f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	200000a4 	.word	0x200000a4

08000e54 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e58:	4802      	ldr	r0, [pc, #8]	; (8000e64 <DMA2_Stream0_IRQHandler+0x10>)
 8000e5a:	f000 ff91 	bl	8001d80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000144 	.word	0x20000144

08000e68 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
//	}

	// Conestoga College implemented change to cause VCP to be used for stdin
	extern UART_HandleTypeDef huart2;

	len = 1;						// over ride the read and only get 1 char
 8000e74:	2301      	movs	r3, #1
 8000e76:	607b      	str	r3, [r7, #4]
	if( HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY) != HAL_OK )
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e80:	68b9      	ldr	r1, [r7, #8]
 8000e82:	4807      	ldr	r0, [pc, #28]	; (8000ea0 <_read+0x38>)
 8000e84:	f002 fda9 	bl	80039da <HAL_UART_Receive>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d002      	beq.n	8000e94 <_read+0x2c>
		len = EOF;					// signal an issue with stream
 8000e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e92:	607b      	str	r3, [r7, #4]

	return len;
 8000e94:	687b      	ldr	r3, [r7, #4]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200001ec 	.word	0x200001ec

08000ea4 <_write>:

int _write(int file, char *ptr, int len)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]

	// Conestoga College implemented change to cause VCP to be used for stdin

	extern UART_HandleTypeDef huart2;

	HAL_StatusTypeDef result = HAL_OK;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	75fb      	strb	r3, [r7, #23]

	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebc:	68b9      	ldr	r1, [r7, #8]
 8000ebe:	4809      	ldr	r0, [pc, #36]	; (8000ee4 <_write+0x40>)
 8000ec0:	f002 fcf9 	bl	80038b6 <HAL_UART_Transmit>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	75fb      	strb	r3, [r7, #23]
	if(result == HAL_ERROR || result == HAL_BUSY)
 8000ec8:	7dfb      	ldrb	r3, [r7, #23]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d002      	beq.n	8000ed4 <_write+0x30>
 8000ece:	7dfb      	ldrb	r3, [r7, #23]
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d101      	bne.n	8000ed8 <_write+0x34>
	{
		Error_Handler();
 8000ed4:	f7ff fe60 	bl	8000b98 <Error_Handler>
	}

	return len;
 8000ed8:	687b      	ldr	r3, [r7, #4]
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200001ec 	.word	0x200001ec

08000ee8 <_close>:



int _close(int file)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	return -1;
 8000ef0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f10:	605a      	str	r2, [r3, #4]
	return 0;
 8000f12:	2300      	movs	r3, #0
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <_isatty>:

int _isatty(int file)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	return 1;
 8000f28:	2301      	movs	r3, #1
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b085      	sub	sp, #20
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	60f8      	str	r0, [r7, #12]
 8000f3e:	60b9      	str	r1, [r7, #8]
 8000f40:	607a      	str	r2, [r7, #4]
	return 0;
 8000f42:	2300      	movs	r3, #0
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f58:	4a14      	ldr	r2, [pc, #80]	; (8000fac <_sbrk+0x5c>)
 8000f5a:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <_sbrk+0x60>)
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f64:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <_sbrk+0x64>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d102      	bne.n	8000f72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f6c:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <_sbrk+0x64>)
 8000f6e:	4a12      	ldr	r2, [pc, #72]	; (8000fb8 <_sbrk+0x68>)
 8000f70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f72:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <_sbrk+0x64>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d207      	bcs.n	8000f90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f80:	f003 f804 	bl	8003f8c <__errno>
 8000f84:	4603      	mov	r3, r0
 8000f86:	220c      	movs	r2, #12
 8000f88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8e:	e009      	b.n	8000fa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <_sbrk+0x64>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f96:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <_sbrk+0x64>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	4a05      	ldr	r2, [pc, #20]	; (8000fb4 <_sbrk+0x64>)
 8000fa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20020000 	.word	0x20020000
 8000fb0:	00000400 	.word	0x00000400
 8000fb4:	20000098 	.word	0x20000098
 8000fb8:	20000248 	.word	0x20000248

08000fbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <SystemInit+0x20>)
 8000fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fc6:	4a05      	ldr	r2, [pc, #20]	; (8000fdc <SystemInit+0x20>)
 8000fc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fe0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001018 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fe4:	480d      	ldr	r0, [pc, #52]	; (800101c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fe6:	490e      	ldr	r1, [pc, #56]	; (8001020 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fe8:	4a0e      	ldr	r2, [pc, #56]	; (8001024 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fec:	e002      	b.n	8000ff4 <LoopCopyDataInit>

08000fee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff2:	3304      	adds	r3, #4

08000ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ff6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff8:	d3f9      	bcc.n	8000fee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffa:	4a0b      	ldr	r2, [pc, #44]	; (8001028 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ffc:	4c0b      	ldr	r4, [pc, #44]	; (800102c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001000:	e001      	b.n	8001006 <LoopFillZerobss>

08001002 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001002:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001004:	3204      	adds	r2, #4

08001006 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001006:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001008:	d3fb      	bcc.n	8001002 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800100a:	f7ff ffd7 	bl	8000fbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800100e:	f002 ffc3 	bl	8003f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001012:	f7ff fab1 	bl	8000578 <main>
  bx  lr    
 8001016:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001018:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800101c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001020:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001024:	08004fc4 	.word	0x08004fc4
  ldr r2, =_sbss
 8001028:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800102c:	20000244 	.word	0x20000244

08001030 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001030:	e7fe      	b.n	8001030 <ADC_IRQHandler>
	...

08001034 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001038:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <HAL_Init+0x40>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a0d      	ldr	r2, [pc, #52]	; (8001074 <HAL_Init+0x40>)
 800103e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001042:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001044:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <HAL_Init+0x40>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <HAL_Init+0x40>)
 800104a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800104e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <HAL_Init+0x40>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a07      	ldr	r2, [pc, #28]	; (8001074 <HAL_Init+0x40>)
 8001056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800105a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105c:	2003      	movs	r0, #3
 800105e:	f000 fd47 	bl	8001af0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001062:	2000      	movs	r0, #0
 8001064:	f000 f808 	bl	8001078 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001068:	f7ff fd9c 	bl	8000ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40023c00 	.word	0x40023c00

08001078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <HAL_InitTick+0x54>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <HAL_InitTick+0x58>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	4619      	mov	r1, r3
 800108a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001092:	fbb2 f3f3 	udiv	r3, r2, r3
 8001096:	4618      	mov	r0, r3
 8001098:	f000 fd5f 	bl	8001b5a <HAL_SYSTICK_Config>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e00e      	b.n	80010c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b0f      	cmp	r3, #15
 80010aa:	d80a      	bhi.n	80010c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ac:	2200      	movs	r2, #0
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295
 80010b4:	f000 fd27 	bl	8001b06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b8:	4a06      	ldr	r2, [pc, #24]	; (80010d4 <HAL_InitTick+0x5c>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010be:	2300      	movs	r3, #0
 80010c0:	e000      	b.n	80010c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000004 	.word	0x20000004
 80010d0:	2000000c 	.word	0x2000000c
 80010d4:	20000008 	.word	0x20000008

080010d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <HAL_IncTick+0x20>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_IncTick+0x24>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4413      	add	r3, r2
 80010e8:	4a04      	ldr	r2, [pc, #16]	; (80010fc <HAL_IncTick+0x24>)
 80010ea:	6013      	str	r3, [r2, #0]
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	2000000c 	.word	0x2000000c
 80010fc:	20000230 	.word	0x20000230

08001100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return uwTick;
 8001104:	4b03      	ldr	r3, [pc, #12]	; (8001114 <HAL_GetTick+0x14>)
 8001106:	681b      	ldr	r3, [r3, #0]
}
 8001108:	4618      	mov	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000230 	.word	0x20000230

08001118 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001120:	f7ff ffee 	bl	8001100 <HAL_GetTick>
 8001124:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001130:	d005      	beq.n	800113e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001132:	4b0a      	ldr	r3, [pc, #40]	; (800115c <HAL_Delay+0x44>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	461a      	mov	r2, r3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4413      	add	r3, r2
 800113c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800113e:	bf00      	nop
 8001140:	f7ff ffde 	bl	8001100 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	429a      	cmp	r2, r3
 800114e:	d8f7      	bhi.n	8001140 <HAL_Delay+0x28>
  {
  }
}
 8001150:	bf00      	nop
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	2000000c 	.word	0x2000000c

08001160 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001168:	2300      	movs	r3, #0
 800116a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e033      	b.n	80011de <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	2b00      	cmp	r3, #0
 800117c:	d109      	bne.n	8001192 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff fd38 	bl	8000bf4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	f003 0310 	and.w	r3, r3, #16
 800119a:	2b00      	cmp	r3, #0
 800119c:	d118      	bne.n	80011d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011a6:	f023 0302 	bic.w	r3, r3, #2
 80011aa:	f043 0202 	orr.w	r2, r3, #2
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f000 fa4e 	bl	8001654 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	f023 0303 	bic.w	r3, r3, #3
 80011c6:	f043 0201 	orr.w	r2, r3, #1
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	641a      	str	r2, [r3, #64]	; 0x40
 80011ce:	e001      	b.n	80011d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d101      	bne.n	8001206 <HAL_ADC_Start_DMA+0x1e>
 8001202:	2302      	movs	r3, #2
 8001204:	e0ce      	b.n	80013a4 <HAL_ADC_Start_DMA+0x1bc>
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2201      	movs	r2, #1
 800120a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	2b01      	cmp	r3, #1
 800121a:	d018      	beq.n	800124e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	689a      	ldr	r2, [r3, #8]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f042 0201 	orr.w	r2, r2, #1
 800122a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800122c:	4b5f      	ldr	r3, [pc, #380]	; (80013ac <HAL_ADC_Start_DMA+0x1c4>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a5f      	ldr	r2, [pc, #380]	; (80013b0 <HAL_ADC_Start_DMA+0x1c8>)
 8001232:	fba2 2303 	umull	r2, r3, r2, r3
 8001236:	0c9a      	lsrs	r2, r3, #18
 8001238:	4613      	mov	r3, r2
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	4413      	add	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001240:	e002      	b.n	8001248 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	3b01      	subs	r3, #1
 8001246:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1f9      	bne.n	8001242 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800125c:	d107      	bne.n	800126e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800126c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	2b01      	cmp	r3, #1
 800127a:	f040 8086 	bne.w	800138a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001286:	f023 0301 	bic.w	r3, r3, #1
 800128a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800129c:	2b00      	cmp	r3, #0
 800129e:	d007      	beq.n	80012b0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012a8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012bc:	d106      	bne.n	80012cc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	f023 0206 	bic.w	r2, r3, #6
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	645a      	str	r2, [r3, #68]	; 0x44
 80012ca:	e002      	b.n	80012d2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2200      	movs	r2, #0
 80012d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012da:	4b36      	ldr	r3, [pc, #216]	; (80013b4 <HAL_ADC_Start_DMA+0x1cc>)
 80012dc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e2:	4a35      	ldr	r2, [pc, #212]	; (80013b8 <HAL_ADC_Start_DMA+0x1d0>)
 80012e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ea:	4a34      	ldr	r2, [pc, #208]	; (80013bc <HAL_ADC_Start_DMA+0x1d4>)
 80012ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f2:	4a33      	ldr	r2, [pc, #204]	; (80013c0 <HAL_ADC_Start_DMA+0x1d8>)
 80012f4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80012fe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	685a      	ldr	r2, [r3, #4]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800130e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	689a      	ldr	r2, [r3, #8]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800131e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	334c      	adds	r3, #76	; 0x4c
 800132a:	4619      	mov	r1, r3
 800132c:	68ba      	ldr	r2, [r7, #8]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f000 fcce 	bl	8001cd0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 031f 	and.w	r3, r3, #31
 800133c:	2b00      	cmp	r3, #0
 800133e:	d10f      	bne.n	8001360 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d129      	bne.n	80013a2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	e020      	b.n	80013a2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a17      	ldr	r2, [pc, #92]	; (80013c4 <HAL_ADC_Start_DMA+0x1dc>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d11b      	bne.n	80013a2 <HAL_ADC_Start_DMA+0x1ba>
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d114      	bne.n	80013a2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	e00b      	b.n	80013a2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f043 0210 	orr.w	r2, r3, #16
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	f043 0201 	orr.w	r2, r3, #1
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000004 	.word	0x20000004
 80013b0:	431bde83 	.word	0x431bde83
 80013b4:	40012300 	.word	0x40012300
 80013b8:	0800184d 	.word	0x0800184d
 80013bc:	08001907 	.word	0x08001907
 80013c0:	08001923 	.word	0x08001923
 80013c4:	40012000 	.word	0x40012000

080013c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001404:	2b01      	cmp	r3, #1
 8001406:	d101      	bne.n	800140c <HAL_ADC_ConfigChannel+0x1c>
 8001408:	2302      	movs	r3, #2
 800140a:	e113      	b.n	8001634 <HAL_ADC_ConfigChannel+0x244>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b09      	cmp	r3, #9
 800141a:	d925      	bls.n	8001468 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	68d9      	ldr	r1, [r3, #12]
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	b29b      	uxth	r3, r3
 8001428:	461a      	mov	r2, r3
 800142a:	4613      	mov	r3, r2
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	4413      	add	r3, r2
 8001430:	3b1e      	subs	r3, #30
 8001432:	2207      	movs	r2, #7
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43da      	mvns	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	400a      	ands	r2, r1
 8001440:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	68d9      	ldr	r1, [r3, #12]
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	b29b      	uxth	r3, r3
 8001452:	4618      	mov	r0, r3
 8001454:	4603      	mov	r3, r0
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	4403      	add	r3, r0
 800145a:	3b1e      	subs	r3, #30
 800145c:	409a      	lsls	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	430a      	orrs	r2, r1
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	e022      	b.n	80014ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6919      	ldr	r1, [r3, #16]
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	b29b      	uxth	r3, r3
 8001474:	461a      	mov	r2, r3
 8001476:	4613      	mov	r3, r2
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	4413      	add	r3, r2
 800147c:	2207      	movs	r2, #7
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43da      	mvns	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	400a      	ands	r2, r1
 800148a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6919      	ldr	r1, [r3, #16]
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	b29b      	uxth	r3, r3
 800149c:	4618      	mov	r0, r3
 800149e:	4603      	mov	r3, r0
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	4403      	add	r3, r0
 80014a4:	409a      	lsls	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	430a      	orrs	r2, r1
 80014ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b06      	cmp	r3, #6
 80014b4:	d824      	bhi.n	8001500 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	4613      	mov	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	3b05      	subs	r3, #5
 80014c8:	221f      	movs	r2, #31
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43da      	mvns	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	400a      	ands	r2, r1
 80014d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	4618      	mov	r0, r3
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	4613      	mov	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	3b05      	subs	r3, #5
 80014f2:	fa00 f203 	lsl.w	r2, r0, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	635a      	str	r2, [r3, #52]	; 0x34
 80014fe:	e04c      	b.n	800159a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b0c      	cmp	r3, #12
 8001506:	d824      	bhi.n	8001552 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	4613      	mov	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4413      	add	r3, r2
 8001518:	3b23      	subs	r3, #35	; 0x23
 800151a:	221f      	movs	r2, #31
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43da      	mvns	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	400a      	ands	r2, r1
 8001528:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	b29b      	uxth	r3, r3
 8001536:	4618      	mov	r0, r3
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	4613      	mov	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4413      	add	r3, r2
 8001542:	3b23      	subs	r3, #35	; 0x23
 8001544:	fa00 f203 	lsl.w	r2, r0, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	430a      	orrs	r2, r1
 800154e:	631a      	str	r2, [r3, #48]	; 0x30
 8001550:	e023      	b.n	800159a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	4613      	mov	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4413      	add	r3, r2
 8001562:	3b41      	subs	r3, #65	; 0x41
 8001564:	221f      	movs	r2, #31
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43da      	mvns	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	400a      	ands	r2, r1
 8001572:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	b29b      	uxth	r3, r3
 8001580:	4618      	mov	r0, r3
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685a      	ldr	r2, [r3, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	3b41      	subs	r3, #65	; 0x41
 800158e:	fa00 f203 	lsl.w	r2, r0, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	430a      	orrs	r2, r1
 8001598:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800159a:	4b29      	ldr	r3, [pc, #164]	; (8001640 <HAL_ADC_ConfigChannel+0x250>)
 800159c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a28      	ldr	r2, [pc, #160]	; (8001644 <HAL_ADC_ConfigChannel+0x254>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d10f      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x1d8>
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b12      	cmp	r3, #18
 80015ae:	d10b      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a1d      	ldr	r2, [pc, #116]	; (8001644 <HAL_ADC_ConfigChannel+0x254>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d12b      	bne.n	800162a <HAL_ADC_ConfigChannel+0x23a>
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a1c      	ldr	r2, [pc, #112]	; (8001648 <HAL_ADC_ConfigChannel+0x258>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d003      	beq.n	80015e4 <HAL_ADC_ConfigChannel+0x1f4>
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b11      	cmp	r3, #17
 80015e2:	d122      	bne.n	800162a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a11      	ldr	r2, [pc, #68]	; (8001648 <HAL_ADC_ConfigChannel+0x258>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d111      	bne.n	800162a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001606:	4b11      	ldr	r3, [pc, #68]	; (800164c <HAL_ADC_ConfigChannel+0x25c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a11      	ldr	r2, [pc, #68]	; (8001650 <HAL_ADC_ConfigChannel+0x260>)
 800160c:	fba2 2303 	umull	r2, r3, r2, r3
 8001610:	0c9a      	lsrs	r2, r3, #18
 8001612:	4613      	mov	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4413      	add	r3, r2
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800161c:	e002      	b.n	8001624 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	3b01      	subs	r3, #1
 8001622:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f9      	bne.n	800161e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	40012300 	.word	0x40012300
 8001644:	40012000 	.word	0x40012000
 8001648:	10000012 	.word	0x10000012
 800164c:	20000004 	.word	0x20000004
 8001650:	431bde83 	.word	0x431bde83

08001654 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800165c:	4b79      	ldr	r3, [pc, #484]	; (8001844 <ADC_Init+0x1f0>)
 800165e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	431a      	orrs	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001688:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6859      	ldr	r1, [r3, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	021a      	lsls	r2, r3, #8
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	685a      	ldr	r2, [r3, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80016ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6859      	ldr	r1, [r3, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	430a      	orrs	r2, r1
 80016be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6899      	ldr	r1, [r3, #8]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68da      	ldr	r2, [r3, #12]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	430a      	orrs	r2, r1
 80016e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e6:	4a58      	ldr	r2, [pc, #352]	; (8001848 <ADC_Init+0x1f4>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d022      	beq.n	8001732 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6899      	ldr	r1, [r3, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	430a      	orrs	r2, r1
 800170c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800171c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6899      	ldr	r1, [r3, #8]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	430a      	orrs	r2, r1
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	e00f      	b.n	8001752 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001740:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001750:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0202 	bic.w	r2, r2, #2
 8001760:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6899      	ldr	r1, [r3, #8]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	7e1b      	ldrb	r3, [r3, #24]
 800176c:	005a      	lsls	r2, r3, #1
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 3020 	ldrb.w	r3, [r3, #32]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d01b      	beq.n	80017b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800178e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800179e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6859      	ldr	r1, [r3, #4]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017aa:	3b01      	subs	r3, #1
 80017ac:	035a      	lsls	r2, r3, #13
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	430a      	orrs	r2, r1
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	e007      	b.n	80017c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	051a      	lsls	r2, r3, #20
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	430a      	orrs	r2, r1
 80017ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6899      	ldr	r1, [r3, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800180a:	025a      	lsls	r2, r3, #9
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	430a      	orrs	r2, r1
 8001812:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001822:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6899      	ldr	r1, [r3, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	029a      	lsls	r2, r3, #10
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	609a      	str	r2, [r3, #8]
}
 8001838:	bf00      	nop
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	40012300 	.word	0x40012300
 8001848:	0f000001 	.word	0x0f000001

0800184c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001858:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001862:	2b00      	cmp	r3, #0
 8001864:	d13c      	bne.n	80018e0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d12b      	bne.n	80018d8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001884:	2b00      	cmp	r3, #0
 8001886:	d127      	bne.n	80018d8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001892:	2b00      	cmp	r3, #0
 8001894:	d006      	beq.n	80018a4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d119      	bne.n	80018d8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f022 0220 	bic.w	r2, r2, #32
 80018b2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d105      	bne.n	80018d8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	f043 0201 	orr.w	r2, r3, #1
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f7ff f91b 	bl	8000b14 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80018de:	e00e      	b.n	80018fe <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e4:	f003 0310 	and.w	r3, r3, #16
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f7ff fd75 	bl	80013dc <HAL_ADC_ErrorCallback>
}
 80018f2:	e004      	b.n	80018fe <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	4798      	blx	r3
}
 80018fe:	bf00      	nop
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b084      	sub	sp, #16
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001912:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f7ff fd57 	bl	80013c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800191a:	bf00      	nop
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b084      	sub	sp, #16
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800192e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2240      	movs	r2, #64	; 0x40
 8001934:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193a:	f043 0204 	orr.w	r2, r3, #4
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f7ff fd4a 	bl	80013dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001948:	bf00      	nop
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <__NVIC_SetPriorityGrouping+0x44>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800196c:	4013      	ands	r3, r2
 800196e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001978:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800197c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001982:	4a04      	ldr	r2, [pc, #16]	; (8001994 <__NVIC_SetPriorityGrouping+0x44>)
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	60d3      	str	r3, [r2, #12]
}
 8001988:	bf00      	nop
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800199c:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <__NVIC_GetPriorityGrouping+0x18>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	0a1b      	lsrs	r3, r3, #8
 80019a2:	f003 0307 	and.w	r3, r3, #7
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	db0b      	blt.n	80019de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	f003 021f 	and.w	r2, r3, #31
 80019cc:	4907      	ldr	r1, [pc, #28]	; (80019ec <__NVIC_EnableIRQ+0x38>)
 80019ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d2:	095b      	lsrs	r3, r3, #5
 80019d4:	2001      	movs	r0, #1
 80019d6:	fa00 f202 	lsl.w	r2, r0, r2
 80019da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000e100 	.word	0xe000e100

080019f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	6039      	str	r1, [r7, #0]
 80019fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	db0a      	blt.n	8001a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	490c      	ldr	r1, [pc, #48]	; (8001a3c <__NVIC_SetPriority+0x4c>)
 8001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0e:	0112      	lsls	r2, r2, #4
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	440b      	add	r3, r1
 8001a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a18:	e00a      	b.n	8001a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	4908      	ldr	r1, [pc, #32]	; (8001a40 <__NVIC_SetPriority+0x50>)
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	3b04      	subs	r3, #4
 8001a28:	0112      	lsls	r2, r2, #4
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	761a      	strb	r2, [r3, #24]
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	e000e100 	.word	0xe000e100
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b089      	sub	sp, #36	; 0x24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f1c3 0307 	rsb	r3, r3, #7
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	bf28      	it	cs
 8001a62:	2304      	movcs	r3, #4
 8001a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3304      	adds	r3, #4
 8001a6a:	2b06      	cmp	r3, #6
 8001a6c:	d902      	bls.n	8001a74 <NVIC_EncodePriority+0x30>
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3b03      	subs	r3, #3
 8001a72:	e000      	b.n	8001a76 <NVIC_EncodePriority+0x32>
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a78:	f04f 32ff 	mov.w	r2, #4294967295
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43da      	mvns	r2, r3
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	401a      	ands	r2, r3
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	fa01 f303 	lsl.w	r3, r1, r3
 8001a96:	43d9      	mvns	r1, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a9c:	4313      	orrs	r3, r2
         );
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3724      	adds	r7, #36	; 0x24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001abc:	d301      	bcc.n	8001ac2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e00f      	b.n	8001ae2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <SysTick_Config+0x40>)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aca:	210f      	movs	r1, #15
 8001acc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad0:	f7ff ff8e 	bl	80019f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <SysTick_Config+0x40>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ada:	4b04      	ldr	r3, [pc, #16]	; (8001aec <SysTick_Config+0x40>)
 8001adc:	2207      	movs	r2, #7
 8001ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	e000e010 	.word	0xe000e010

08001af0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff ff29 	bl	8001950 <__NVIC_SetPriorityGrouping>
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b086      	sub	sp, #24
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	60b9      	str	r1, [r7, #8]
 8001b10:	607a      	str	r2, [r7, #4]
 8001b12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b18:	f7ff ff3e 	bl	8001998 <__NVIC_GetPriorityGrouping>
 8001b1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	68b9      	ldr	r1, [r7, #8]
 8001b22:	6978      	ldr	r0, [r7, #20]
 8001b24:	f7ff ff8e 	bl	8001a44 <NVIC_EncodePriority>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b2e:	4611      	mov	r1, r2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff ff5d 	bl	80019f0 <__NVIC_SetPriority>
}
 8001b36:	bf00      	nop
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	4603      	mov	r3, r0
 8001b46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ff31 	bl	80019b4 <__NVIC_EnableIRQ>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ffa2 	bl	8001aac <SysTick_Config>
 8001b68:	4603      	mov	r3, r0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b80:	f7ff fabe 	bl	8001100 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e099      	b.n	8001cc4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2202      	movs	r2, #2
 8001b94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f022 0201 	bic.w	r2, r2, #1
 8001bae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bb0:	e00f      	b.n	8001bd2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bb2:	f7ff faa5 	bl	8001100 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b05      	cmp	r3, #5
 8001bbe:	d908      	bls.n	8001bd2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2220      	movs	r2, #32
 8001bc4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2203      	movs	r2, #3
 8001bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e078      	b.n	8001cc4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1e8      	bne.n	8001bb2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	4b38      	ldr	r3, [pc, #224]	; (8001ccc <HAL_DMA_Init+0x158>)
 8001bec:	4013      	ands	r3, r2
 8001bee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c28:	2b04      	cmp	r3, #4
 8001c2a:	d107      	bne.n	8001c3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c34:	4313      	orrs	r3, r2
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	f023 0307 	bic.w	r3, r3, #7
 8001c52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	d117      	bne.n	8001c96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d00e      	beq.n	8001c96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 fa6f 	bl	800215c <DMA_CheckFifoParam>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d008      	beq.n	8001c96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2240      	movs	r2, #64	; 0x40
 8001c88:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c92:	2301      	movs	r3, #1
 8001c94:	e016      	b.n	8001cc4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 fa26 	bl	80020f0 <DMA_CalcBaseAndBitshift>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cac:	223f      	movs	r2, #63	; 0x3f
 8001cae:	409a      	lsls	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	f010803f 	.word	0xf010803f

08001cd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
 8001cdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d101      	bne.n	8001cf6 <HAL_DMA_Start_IT+0x26>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e040      	b.n	8001d78 <HAL_DMA_Start_IT+0xa8>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d12f      	bne.n	8001d6a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2200      	movs	r2, #0
 8001d16:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	68b9      	ldr	r1, [r7, #8]
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f000 f9b8 	bl	8002094 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d28:	223f      	movs	r2, #63	; 0x3f
 8001d2a:	409a      	lsls	r2, r3
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 0216 	orr.w	r2, r2, #22
 8001d3e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d007      	beq.n	8001d58 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 0208 	orr.w	r2, r2, #8
 8001d56:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f042 0201 	orr.w	r2, r2, #1
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	e005      	b.n	8001d76 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d72:	2302      	movs	r3, #2
 8001d74:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3718      	adds	r7, #24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d8c:	4b92      	ldr	r3, [pc, #584]	; (8001fd8 <HAL_DMA_IRQHandler+0x258>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a92      	ldr	r2, [pc, #584]	; (8001fdc <HAL_DMA_IRQHandler+0x25c>)
 8001d92:	fba2 2303 	umull	r2, r3, r2, r3
 8001d96:	0a9b      	lsrs	r3, r3, #10
 8001d98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001daa:	2208      	movs	r2, #8
 8001dac:	409a      	lsls	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	4013      	ands	r3, r2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d01a      	beq.n	8001dec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d013      	beq.n	8001dec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 0204 	bic.w	r2, r2, #4
 8001dd2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd8:	2208      	movs	r2, #8
 8001dda:	409a      	lsls	r2, r3
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de4:	f043 0201 	orr.w	r2, r3, #1
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df0:	2201      	movs	r2, #1
 8001df2:	409a      	lsls	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4013      	ands	r3, r2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d012      	beq.n	8001e22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00b      	beq.n	8001e22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0e:	2201      	movs	r2, #1
 8001e10:	409a      	lsls	r2, r3
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e1a:	f043 0202 	orr.w	r2, r3, #2
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e26:	2204      	movs	r2, #4
 8001e28:	409a      	lsls	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d012      	beq.n	8001e58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00b      	beq.n	8001e58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e44:	2204      	movs	r2, #4
 8001e46:	409a      	lsls	r2, r3
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e50:	f043 0204 	orr.w	r2, r3, #4
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5c:	2210      	movs	r2, #16
 8001e5e:	409a      	lsls	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4013      	ands	r3, r2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d043      	beq.n	8001ef0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0308 	and.w	r3, r3, #8
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d03c      	beq.n	8001ef0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7a:	2210      	movs	r2, #16
 8001e7c:	409a      	lsls	r2, r3
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d018      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d108      	bne.n	8001eb0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d024      	beq.n	8001ef0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	4798      	blx	r3
 8001eae:	e01f      	b.n	8001ef0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d01b      	beq.n	8001ef0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	4798      	blx	r3
 8001ec0:	e016      	b.n	8001ef0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d107      	bne.n	8001ee0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 0208 	bic.w	r2, r2, #8
 8001ede:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef4:	2220      	movs	r2, #32
 8001ef6:	409a      	lsls	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4013      	ands	r3, r2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 808e 	beq.w	800201e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0310 	and.w	r3, r3, #16
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f000 8086 	beq.w	800201e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f16:	2220      	movs	r2, #32
 8001f18:	409a      	lsls	r2, r3
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b05      	cmp	r3, #5
 8001f28:	d136      	bne.n	8001f98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 0216 	bic.w	r2, r2, #22
 8001f38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	695a      	ldr	r2, [r3, #20]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d103      	bne.n	8001f5a <HAL_DMA_IRQHandler+0x1da>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d007      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0208 	bic.w	r2, r2, #8
 8001f68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6e:	223f      	movs	r2, #63	; 0x3f
 8001f70:	409a      	lsls	r2, r3
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d07d      	beq.n	800208a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	4798      	blx	r3
        }
        return;
 8001f96:	e078      	b.n	800208a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d01c      	beq.n	8001fe0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d108      	bne.n	8001fc6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d030      	beq.n	800201e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	4798      	blx	r3
 8001fc4:	e02b      	b.n	800201e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d027      	beq.n	800201e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	4798      	blx	r3
 8001fd6:	e022      	b.n	800201e <HAL_DMA_IRQHandler+0x29e>
 8001fd8:	20000004 	.word	0x20000004
 8001fdc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10f      	bne.n	800200e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 0210 	bic.w	r2, r2, #16
 8001ffc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002022:	2b00      	cmp	r3, #0
 8002024:	d032      	beq.n	800208c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d022      	beq.n	8002078 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2205      	movs	r2, #5
 8002036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 0201 	bic.w	r2, r2, #1
 8002048:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	3301      	adds	r3, #1
 800204e:	60bb      	str	r3, [r7, #8]
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	429a      	cmp	r2, r3
 8002054:	d307      	bcc.n	8002066 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1f2      	bne.n	800204a <HAL_DMA_IRQHandler+0x2ca>
 8002064:	e000      	b.n	8002068 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002066:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	4798      	blx	r3
 8002088:	e000      	b.n	800208c <HAL_DMA_IRQHandler+0x30c>
        return;
 800208a:	bf00      	nop
    }
  }
}
 800208c:	3718      	adds	r7, #24
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop

08002094 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
 80020a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	2b40      	cmp	r3, #64	; 0x40
 80020c0:	d108      	bne.n	80020d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020d2:	e007      	b.n	80020e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68ba      	ldr	r2, [r7, #8]
 80020da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	60da      	str	r2, [r3, #12]
}
 80020e4:	bf00      	nop
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	3b10      	subs	r3, #16
 8002100:	4a14      	ldr	r2, [pc, #80]	; (8002154 <DMA_CalcBaseAndBitshift+0x64>)
 8002102:	fba2 2303 	umull	r2, r3, r2, r3
 8002106:	091b      	lsrs	r3, r3, #4
 8002108:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800210a:	4a13      	ldr	r2, [pc, #76]	; (8002158 <DMA_CalcBaseAndBitshift+0x68>)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4413      	add	r3, r2
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	461a      	mov	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2b03      	cmp	r3, #3
 800211c:	d909      	bls.n	8002132 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002126:	f023 0303 	bic.w	r3, r3, #3
 800212a:	1d1a      	adds	r2, r3, #4
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	659a      	str	r2, [r3, #88]	; 0x58
 8002130:	e007      	b.n	8002142 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800213a:	f023 0303 	bic.w	r3, r3, #3
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002146:	4618      	mov	r0, r3
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	aaaaaaab 	.word	0xaaaaaaab
 8002158:	08004f14 	.word	0x08004f14

0800215c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002164:	2300      	movs	r3, #0
 8002166:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d11f      	bne.n	80021b6 <DMA_CheckFifoParam+0x5a>
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2b03      	cmp	r3, #3
 800217a:	d856      	bhi.n	800222a <DMA_CheckFifoParam+0xce>
 800217c:	a201      	add	r2, pc, #4	; (adr r2, 8002184 <DMA_CheckFifoParam+0x28>)
 800217e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002182:	bf00      	nop
 8002184:	08002195 	.word	0x08002195
 8002188:	080021a7 	.word	0x080021a7
 800218c:	08002195 	.word	0x08002195
 8002190:	0800222b 	.word	0x0800222b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002198:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d046      	beq.n	800222e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021a4:	e043      	b.n	800222e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021ae:	d140      	bne.n	8002232 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021b4:	e03d      	b.n	8002232 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021be:	d121      	bne.n	8002204 <DMA_CheckFifoParam+0xa8>
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	2b03      	cmp	r3, #3
 80021c4:	d837      	bhi.n	8002236 <DMA_CheckFifoParam+0xda>
 80021c6:	a201      	add	r2, pc, #4	; (adr r2, 80021cc <DMA_CheckFifoParam+0x70>)
 80021c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021cc:	080021dd 	.word	0x080021dd
 80021d0:	080021e3 	.word	0x080021e3
 80021d4:	080021dd 	.word	0x080021dd
 80021d8:	080021f5 	.word	0x080021f5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	73fb      	strb	r3, [r7, #15]
      break;
 80021e0:	e030      	b.n	8002244 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d025      	beq.n	800223a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021f2:	e022      	b.n	800223a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021fc:	d11f      	bne.n	800223e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002202:	e01c      	b.n	800223e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2b02      	cmp	r3, #2
 8002208:	d903      	bls.n	8002212 <DMA_CheckFifoParam+0xb6>
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	2b03      	cmp	r3, #3
 800220e:	d003      	beq.n	8002218 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002210:	e018      	b.n	8002244 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	73fb      	strb	r3, [r7, #15]
      break;
 8002216:	e015      	b.n	8002244 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00e      	beq.n	8002242 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	73fb      	strb	r3, [r7, #15]
      break;
 8002228:	e00b      	b.n	8002242 <DMA_CheckFifoParam+0xe6>
      break;
 800222a:	bf00      	nop
 800222c:	e00a      	b.n	8002244 <DMA_CheckFifoParam+0xe8>
      break;
 800222e:	bf00      	nop
 8002230:	e008      	b.n	8002244 <DMA_CheckFifoParam+0xe8>
      break;
 8002232:	bf00      	nop
 8002234:	e006      	b.n	8002244 <DMA_CheckFifoParam+0xe8>
      break;
 8002236:	bf00      	nop
 8002238:	e004      	b.n	8002244 <DMA_CheckFifoParam+0xe8>
      break;
 800223a:	bf00      	nop
 800223c:	e002      	b.n	8002244 <DMA_CheckFifoParam+0xe8>
      break;   
 800223e:	bf00      	nop
 8002240:	e000      	b.n	8002244 <DMA_CheckFifoParam+0xe8>
      break;
 8002242:	bf00      	nop
    }
  } 
  
  return status; 
 8002244:	7bfb      	ldrb	r3, [r7, #15]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop

08002254 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002254:	b480      	push	{r7}
 8002256:	b089      	sub	sp, #36	; 0x24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002262:	2300      	movs	r3, #0
 8002264:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002266:	2300      	movs	r3, #0
 8002268:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800226a:	2300      	movs	r3, #0
 800226c:	61fb      	str	r3, [r7, #28]
 800226e:	e159      	b.n	8002524 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002270:	2201      	movs	r2, #1
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	4013      	ands	r3, r2
 8002282:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	429a      	cmp	r2, r3
 800228a:	f040 8148 	bne.w	800251e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	2b01      	cmp	r3, #1
 8002298:	d005      	beq.n	80022a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d130      	bne.n	8002308 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	2203      	movs	r2, #3
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43db      	mvns	r3, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4013      	ands	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	68da      	ldr	r2, [r3, #12]
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022dc:	2201      	movs	r2, #1
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	091b      	lsrs	r3, r3, #4
 80022f2:	f003 0201 	and.w	r2, r3, #1
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 0303 	and.w	r3, r3, #3
 8002310:	2b03      	cmp	r3, #3
 8002312:	d017      	beq.n	8002344 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	2203      	movs	r2, #3
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4013      	ands	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 0303 	and.w	r3, r3, #3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d123      	bne.n	8002398 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	08da      	lsrs	r2, r3, #3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3208      	adds	r2, #8
 8002358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800235c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	220f      	movs	r2, #15
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	691a      	ldr	r2, [r3, #16]
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4313      	orrs	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	08da      	lsrs	r2, r3, #3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3208      	adds	r2, #8
 8002392:	69b9      	ldr	r1, [r7, #24]
 8002394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	2203      	movs	r2, #3
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4013      	ands	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 0203 	and.w	r2, r3, #3
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 80a2 	beq.w	800251e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	4b57      	ldr	r3, [pc, #348]	; (800253c <HAL_GPIO_Init+0x2e8>)
 80023e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e2:	4a56      	ldr	r2, [pc, #344]	; (800253c <HAL_GPIO_Init+0x2e8>)
 80023e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023e8:	6453      	str	r3, [r2, #68]	; 0x44
 80023ea:	4b54      	ldr	r3, [pc, #336]	; (800253c <HAL_GPIO_Init+0x2e8>)
 80023ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023f6:	4a52      	ldr	r2, [pc, #328]	; (8002540 <HAL_GPIO_Init+0x2ec>)
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	089b      	lsrs	r3, r3, #2
 80023fc:	3302      	adds	r3, #2
 80023fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	220f      	movs	r2, #15
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43db      	mvns	r3, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4013      	ands	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a49      	ldr	r2, [pc, #292]	; (8002544 <HAL_GPIO_Init+0x2f0>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d019      	beq.n	8002456 <HAL_GPIO_Init+0x202>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a48      	ldr	r2, [pc, #288]	; (8002548 <HAL_GPIO_Init+0x2f4>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d013      	beq.n	8002452 <HAL_GPIO_Init+0x1fe>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a47      	ldr	r2, [pc, #284]	; (800254c <HAL_GPIO_Init+0x2f8>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d00d      	beq.n	800244e <HAL_GPIO_Init+0x1fa>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a46      	ldr	r2, [pc, #280]	; (8002550 <HAL_GPIO_Init+0x2fc>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d007      	beq.n	800244a <HAL_GPIO_Init+0x1f6>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a45      	ldr	r2, [pc, #276]	; (8002554 <HAL_GPIO_Init+0x300>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d101      	bne.n	8002446 <HAL_GPIO_Init+0x1f2>
 8002442:	2304      	movs	r3, #4
 8002444:	e008      	b.n	8002458 <HAL_GPIO_Init+0x204>
 8002446:	2307      	movs	r3, #7
 8002448:	e006      	b.n	8002458 <HAL_GPIO_Init+0x204>
 800244a:	2303      	movs	r3, #3
 800244c:	e004      	b.n	8002458 <HAL_GPIO_Init+0x204>
 800244e:	2302      	movs	r3, #2
 8002450:	e002      	b.n	8002458 <HAL_GPIO_Init+0x204>
 8002452:	2301      	movs	r3, #1
 8002454:	e000      	b.n	8002458 <HAL_GPIO_Init+0x204>
 8002456:	2300      	movs	r3, #0
 8002458:	69fa      	ldr	r2, [r7, #28]
 800245a:	f002 0203 	and.w	r2, r2, #3
 800245e:	0092      	lsls	r2, r2, #2
 8002460:	4093      	lsls	r3, r2
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4313      	orrs	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002468:	4935      	ldr	r1, [pc, #212]	; (8002540 <HAL_GPIO_Init+0x2ec>)
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	089b      	lsrs	r3, r3, #2
 800246e:	3302      	adds	r3, #2
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002476:	4b38      	ldr	r3, [pc, #224]	; (8002558 <HAL_GPIO_Init+0x304>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	43db      	mvns	r3, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4013      	ands	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800249a:	4a2f      	ldr	r2, [pc, #188]	; (8002558 <HAL_GPIO_Init+0x304>)
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024a0:	4b2d      	ldr	r3, [pc, #180]	; (8002558 <HAL_GPIO_Init+0x304>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	43db      	mvns	r3, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4013      	ands	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024c4:	4a24      	ldr	r2, [pc, #144]	; (8002558 <HAL_GPIO_Init+0x304>)
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ca:	4b23      	ldr	r3, [pc, #140]	; (8002558 <HAL_GPIO_Init+0x304>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	43db      	mvns	r3, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4013      	ands	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024ee:	4a1a      	ldr	r2, [pc, #104]	; (8002558 <HAL_GPIO_Init+0x304>)
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024f4:	4b18      	ldr	r3, [pc, #96]	; (8002558 <HAL_GPIO_Init+0x304>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	4313      	orrs	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002518:	4a0f      	ldr	r2, [pc, #60]	; (8002558 <HAL_GPIO_Init+0x304>)
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	3301      	adds	r3, #1
 8002522:	61fb      	str	r3, [r7, #28]
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	2b0f      	cmp	r3, #15
 8002528:	f67f aea2 	bls.w	8002270 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800252c:	bf00      	nop
 800252e:	bf00      	nop
 8002530:	3724      	adds	r7, #36	; 0x24
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	40023800 	.word	0x40023800
 8002540:	40013800 	.word	0x40013800
 8002544:	40020000 	.word	0x40020000
 8002548:	40020400 	.word	0x40020400
 800254c:	40020800 	.word	0x40020800
 8002550:	40020c00 	.word	0x40020c00
 8002554:	40021000 	.word	0x40021000
 8002558:	40013c00 	.word	0x40013c00

0800255c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	460b      	mov	r3, r1
 8002566:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	691a      	ldr	r2, [r3, #16]
 800256c:	887b      	ldrh	r3, [r7, #2]
 800256e:	4013      	ands	r3, r2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d002      	beq.n	800257a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002574:	2301      	movs	r3, #1
 8002576:	73fb      	strb	r3, [r7, #15]
 8002578:	e001      	b.n	800257e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800257a:	2300      	movs	r3, #0
 800257c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800257e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002580:	4618      	mov	r0, r3
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	460b      	mov	r3, r1
 8002596:	807b      	strh	r3, [r7, #2]
 8002598:	4613      	mov	r3, r2
 800259a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800259c:	787b      	ldrb	r3, [r7, #1]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025a2:	887a      	ldrh	r2, [r7, #2]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025a8:	e003      	b.n	80025b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025aa:	887b      	ldrh	r3, [r7, #2]
 80025ac:	041a      	lsls	r2, r3, #16
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	619a      	str	r2, [r3, #24]
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025be:	b480      	push	{r7}
 80025c0:	b085      	sub	sp, #20
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	460b      	mov	r3, r1
 80025c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025d0:	887a      	ldrh	r2, [r7, #2]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	4013      	ands	r3, r2
 80025d6:	041a      	lsls	r2, r3, #16
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	43d9      	mvns	r1, r3
 80025dc:	887b      	ldrh	r3, [r7, #2]
 80025de:	400b      	ands	r3, r1
 80025e0:	431a      	orrs	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	619a      	str	r2, [r3, #24]
}
 80025e6:	bf00      	nop
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
	...

080025f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e264      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d075      	beq.n	80026fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002612:	4ba3      	ldr	r3, [pc, #652]	; (80028a0 <HAL_RCC_OscConfig+0x2ac>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 030c 	and.w	r3, r3, #12
 800261a:	2b04      	cmp	r3, #4
 800261c:	d00c      	beq.n	8002638 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800261e:	4ba0      	ldr	r3, [pc, #640]	; (80028a0 <HAL_RCC_OscConfig+0x2ac>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002626:	2b08      	cmp	r3, #8
 8002628:	d112      	bne.n	8002650 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800262a:	4b9d      	ldr	r3, [pc, #628]	; (80028a0 <HAL_RCC_OscConfig+0x2ac>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002632:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002636:	d10b      	bne.n	8002650 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002638:	4b99      	ldr	r3, [pc, #612]	; (80028a0 <HAL_RCC_OscConfig+0x2ac>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d05b      	beq.n	80026fc <HAL_RCC_OscConfig+0x108>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d157      	bne.n	80026fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e23f      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002658:	d106      	bne.n	8002668 <HAL_RCC_OscConfig+0x74>
 800265a:	4b91      	ldr	r3, [pc, #580]	; (80028a0 <HAL_RCC_OscConfig+0x2ac>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a90      	ldr	r2, [pc, #576]	; (80028a0 <HAL_RCC_OscConfig+0x2ac>)
 8002660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	e01d      	b.n	80026a4 <HAL_RCC_OscConfig+0xb0>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002670:	d10c      	bne.n	800268c <HAL_RCC_OscConfig+0x98>
 8002672:	4b8b      	ldr	r3, [pc, #556]	; (80028a0 <HAL_RCC_OscConfig+0x2ac>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a8a      	ldr	r2, [pc, #552]	; (80028a0 <HAL_RCC_OscConfig+0x2ac>)
 8002678:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	4b88      	ldr	r3, [pc, #544]	; (80028a0 <HAL_RCC_OscConfig+0x2ac>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a87      	ldr	r2, [pc, #540]	; (80028a0 <HAL_RCC_OscConfig+0x2ac>)
 8002684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	e00b      	b.n	80026a4 <HAL_RCC_OscConfig+0xb0>
 800268c:	4b84      	ldr	r3, [pc, #528]	; (80028a0 <HAL_RCC_OscConfig+0x2ac>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a83      	ldr	r2, [pc, #524]	; (80028a0 <HAL_RCC_OscConfig+0x2ac>)
 8002692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	4b81      	ldr	r3, [pc, #516]	; (80028a0 <HAL_RCC_OscConfig+0x2ac>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a80      	ldr	r2, [pc, #512]	; (80028a0 <HAL_RCC_OscConfig+0x2ac>)
 800269e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d013      	beq.n	80026d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ac:	f7fe fd28 	bl	8001100 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026b4:	f7fe fd24 	bl	8001100 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b64      	cmp	r3, #100	; 0x64
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e204      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c6:	4b76      	ldr	r3, [pc, #472]	; (80028a0 <HAL_RCC_OscConfig+0x2ac>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0f0      	beq.n	80026b4 <HAL_RCC_OscConfig+0xc0>
 80026d2:	e014      	b.n	80026fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d4:	f7fe fd14 	bl	8001100 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026dc:	f7fe fd10 	bl	8001100 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b64      	cmp	r3, #100	; 0x64
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e1f0      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ee:	4b6c      	ldr	r3, [pc, #432]	; (80028a0 <HAL_RCC_OscConfig+0x2ac>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0xe8>
 80026fa:	e000      	b.n	80026fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d063      	beq.n	80027d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800270a:	4b65      	ldr	r3, [pc, #404]	; (80028a0 <HAL_RCC_OscConfig+0x2ac>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 030c 	and.w	r3, r3, #12
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00b      	beq.n	800272e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002716:	4b62      	ldr	r3, [pc, #392]	; (80028a0 <HAL_RCC_OscConfig+0x2ac>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800271e:	2b08      	cmp	r3, #8
 8002720:	d11c      	bne.n	800275c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002722:	4b5f      	ldr	r3, [pc, #380]	; (80028a0 <HAL_RCC_OscConfig+0x2ac>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d116      	bne.n	800275c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800272e:	4b5c      	ldr	r3, [pc, #368]	; (80028a0 <HAL_RCC_OscConfig+0x2ac>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d005      	beq.n	8002746 <HAL_RCC_OscConfig+0x152>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d001      	beq.n	8002746 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e1c4      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002746:	4b56      	ldr	r3, [pc, #344]	; (80028a0 <HAL_RCC_OscConfig+0x2ac>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	4952      	ldr	r1, [pc, #328]	; (80028a0 <HAL_RCC_OscConfig+0x2ac>)
 8002756:	4313      	orrs	r3, r2
 8002758:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800275a:	e03a      	b.n	80027d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d020      	beq.n	80027a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002764:	4b4f      	ldr	r3, [pc, #316]	; (80028a4 <HAL_RCC_OscConfig+0x2b0>)
 8002766:	2201      	movs	r2, #1
 8002768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276a:	f7fe fcc9 	bl	8001100 <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002772:	f7fe fcc5 	bl	8001100 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e1a5      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002784:	4b46      	ldr	r3, [pc, #280]	; (80028a0 <HAL_RCC_OscConfig+0x2ac>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0f0      	beq.n	8002772 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002790:	4b43      	ldr	r3, [pc, #268]	; (80028a0 <HAL_RCC_OscConfig+0x2ac>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	4940      	ldr	r1, [pc, #256]	; (80028a0 <HAL_RCC_OscConfig+0x2ac>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	600b      	str	r3, [r1, #0]
 80027a4:	e015      	b.n	80027d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027a6:	4b3f      	ldr	r3, [pc, #252]	; (80028a4 <HAL_RCC_OscConfig+0x2b0>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ac:	f7fe fca8 	bl	8001100 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027b4:	f7fe fca4 	bl	8001100 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e184      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027c6:	4b36      	ldr	r3, [pc, #216]	; (80028a0 <HAL_RCC_OscConfig+0x2ac>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1f0      	bne.n	80027b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d030      	beq.n	8002840 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d016      	beq.n	8002814 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027e6:	4b30      	ldr	r3, [pc, #192]	; (80028a8 <HAL_RCC_OscConfig+0x2b4>)
 80027e8:	2201      	movs	r2, #1
 80027ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ec:	f7fe fc88 	bl	8001100 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027f4:	f7fe fc84 	bl	8001100 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e164      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002806:	4b26      	ldr	r3, [pc, #152]	; (80028a0 <HAL_RCC_OscConfig+0x2ac>)
 8002808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0f0      	beq.n	80027f4 <HAL_RCC_OscConfig+0x200>
 8002812:	e015      	b.n	8002840 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002814:	4b24      	ldr	r3, [pc, #144]	; (80028a8 <HAL_RCC_OscConfig+0x2b4>)
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281a:	f7fe fc71 	bl	8001100 <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002822:	f7fe fc6d 	bl	8001100 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e14d      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002834:	4b1a      	ldr	r3, [pc, #104]	; (80028a0 <HAL_RCC_OscConfig+0x2ac>)
 8002836:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1f0      	bne.n	8002822 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 80a0 	beq.w	800298e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800284e:	2300      	movs	r3, #0
 8002850:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002852:	4b13      	ldr	r3, [pc, #76]	; (80028a0 <HAL_RCC_OscConfig+0x2ac>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10f      	bne.n	800287e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	60bb      	str	r3, [r7, #8]
 8002862:	4b0f      	ldr	r3, [pc, #60]	; (80028a0 <HAL_RCC_OscConfig+0x2ac>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	4a0e      	ldr	r2, [pc, #56]	; (80028a0 <HAL_RCC_OscConfig+0x2ac>)
 8002868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800286c:	6413      	str	r3, [r2, #64]	; 0x40
 800286e:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <HAL_RCC_OscConfig+0x2ac>)
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800287a:	2301      	movs	r3, #1
 800287c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287e:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <HAL_RCC_OscConfig+0x2b8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002886:	2b00      	cmp	r3, #0
 8002888:	d121      	bne.n	80028ce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800288a:	4b08      	ldr	r3, [pc, #32]	; (80028ac <HAL_RCC_OscConfig+0x2b8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a07      	ldr	r2, [pc, #28]	; (80028ac <HAL_RCC_OscConfig+0x2b8>)
 8002890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002894:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002896:	f7fe fc33 	bl	8001100 <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289c:	e011      	b.n	80028c2 <HAL_RCC_OscConfig+0x2ce>
 800289e:	bf00      	nop
 80028a0:	40023800 	.word	0x40023800
 80028a4:	42470000 	.word	0x42470000
 80028a8:	42470e80 	.word	0x42470e80
 80028ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b0:	f7fe fc26 	bl	8001100 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e106      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c2:	4b85      	ldr	r3, [pc, #532]	; (8002ad8 <HAL_RCC_OscConfig+0x4e4>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0f0      	beq.n	80028b0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d106      	bne.n	80028e4 <HAL_RCC_OscConfig+0x2f0>
 80028d6:	4b81      	ldr	r3, [pc, #516]	; (8002adc <HAL_RCC_OscConfig+0x4e8>)
 80028d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028da:	4a80      	ldr	r2, [pc, #512]	; (8002adc <HAL_RCC_OscConfig+0x4e8>)
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	6713      	str	r3, [r2, #112]	; 0x70
 80028e2:	e01c      	b.n	800291e <HAL_RCC_OscConfig+0x32a>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	2b05      	cmp	r3, #5
 80028ea:	d10c      	bne.n	8002906 <HAL_RCC_OscConfig+0x312>
 80028ec:	4b7b      	ldr	r3, [pc, #492]	; (8002adc <HAL_RCC_OscConfig+0x4e8>)
 80028ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f0:	4a7a      	ldr	r2, [pc, #488]	; (8002adc <HAL_RCC_OscConfig+0x4e8>)
 80028f2:	f043 0304 	orr.w	r3, r3, #4
 80028f6:	6713      	str	r3, [r2, #112]	; 0x70
 80028f8:	4b78      	ldr	r3, [pc, #480]	; (8002adc <HAL_RCC_OscConfig+0x4e8>)
 80028fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fc:	4a77      	ldr	r2, [pc, #476]	; (8002adc <HAL_RCC_OscConfig+0x4e8>)
 80028fe:	f043 0301 	orr.w	r3, r3, #1
 8002902:	6713      	str	r3, [r2, #112]	; 0x70
 8002904:	e00b      	b.n	800291e <HAL_RCC_OscConfig+0x32a>
 8002906:	4b75      	ldr	r3, [pc, #468]	; (8002adc <HAL_RCC_OscConfig+0x4e8>)
 8002908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290a:	4a74      	ldr	r2, [pc, #464]	; (8002adc <HAL_RCC_OscConfig+0x4e8>)
 800290c:	f023 0301 	bic.w	r3, r3, #1
 8002910:	6713      	str	r3, [r2, #112]	; 0x70
 8002912:	4b72      	ldr	r3, [pc, #456]	; (8002adc <HAL_RCC_OscConfig+0x4e8>)
 8002914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002916:	4a71      	ldr	r2, [pc, #452]	; (8002adc <HAL_RCC_OscConfig+0x4e8>)
 8002918:	f023 0304 	bic.w	r3, r3, #4
 800291c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d015      	beq.n	8002952 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002926:	f7fe fbeb 	bl	8001100 <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800292c:	e00a      	b.n	8002944 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800292e:	f7fe fbe7 	bl	8001100 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	f241 3288 	movw	r2, #5000	; 0x1388
 800293c:	4293      	cmp	r3, r2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e0c5      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002944:	4b65      	ldr	r3, [pc, #404]	; (8002adc <HAL_RCC_OscConfig+0x4e8>)
 8002946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0ee      	beq.n	800292e <HAL_RCC_OscConfig+0x33a>
 8002950:	e014      	b.n	800297c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002952:	f7fe fbd5 	bl	8001100 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002958:	e00a      	b.n	8002970 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800295a:	f7fe fbd1 	bl	8001100 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	f241 3288 	movw	r2, #5000	; 0x1388
 8002968:	4293      	cmp	r3, r2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e0af      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002970:	4b5a      	ldr	r3, [pc, #360]	; (8002adc <HAL_RCC_OscConfig+0x4e8>)
 8002972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1ee      	bne.n	800295a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800297c:	7dfb      	ldrb	r3, [r7, #23]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d105      	bne.n	800298e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002982:	4b56      	ldr	r3, [pc, #344]	; (8002adc <HAL_RCC_OscConfig+0x4e8>)
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	4a55      	ldr	r2, [pc, #340]	; (8002adc <HAL_RCC_OscConfig+0x4e8>)
 8002988:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800298c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 809b 	beq.w	8002ace <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002998:	4b50      	ldr	r3, [pc, #320]	; (8002adc <HAL_RCC_OscConfig+0x4e8>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f003 030c 	and.w	r3, r3, #12
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d05c      	beq.n	8002a5e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d141      	bne.n	8002a30 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ac:	4b4c      	ldr	r3, [pc, #304]	; (8002ae0 <HAL_RCC_OscConfig+0x4ec>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b2:	f7fe fba5 	bl	8001100 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ba:	f7fe fba1 	bl	8001100 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e081      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029cc:	4b43      	ldr	r3, [pc, #268]	; (8002adc <HAL_RCC_OscConfig+0x4e8>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1f0      	bne.n	80029ba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	69da      	ldr	r2, [r3, #28]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	431a      	orrs	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e6:	019b      	lsls	r3, r3, #6
 80029e8:	431a      	orrs	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ee:	085b      	lsrs	r3, r3, #1
 80029f0:	3b01      	subs	r3, #1
 80029f2:	041b      	lsls	r3, r3, #16
 80029f4:	431a      	orrs	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fa:	061b      	lsls	r3, r3, #24
 80029fc:	4937      	ldr	r1, [pc, #220]	; (8002adc <HAL_RCC_OscConfig+0x4e8>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a02:	4b37      	ldr	r3, [pc, #220]	; (8002ae0 <HAL_RCC_OscConfig+0x4ec>)
 8002a04:	2201      	movs	r2, #1
 8002a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a08:	f7fe fb7a 	bl	8001100 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a10:	f7fe fb76 	bl	8001100 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e056      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a22:	4b2e      	ldr	r3, [pc, #184]	; (8002adc <HAL_RCC_OscConfig+0x4e8>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0f0      	beq.n	8002a10 <HAL_RCC_OscConfig+0x41c>
 8002a2e:	e04e      	b.n	8002ace <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a30:	4b2b      	ldr	r3, [pc, #172]	; (8002ae0 <HAL_RCC_OscConfig+0x4ec>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a36:	f7fe fb63 	bl	8001100 <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a3c:	e008      	b.n	8002a50 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a3e:	f7fe fb5f 	bl	8001100 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e03f      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a50:	4b22      	ldr	r3, [pc, #136]	; (8002adc <HAL_RCC_OscConfig+0x4e8>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1f0      	bne.n	8002a3e <HAL_RCC_OscConfig+0x44a>
 8002a5c:	e037      	b.n	8002ace <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d101      	bne.n	8002a6a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e032      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a6a:	4b1c      	ldr	r3, [pc, #112]	; (8002adc <HAL_RCC_OscConfig+0x4e8>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d028      	beq.n	8002aca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d121      	bne.n	8002aca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d11a      	bne.n	8002aca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002aa0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d111      	bne.n	8002aca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab0:	085b      	lsrs	r3, r3, #1
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d107      	bne.n	8002aca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d001      	beq.n	8002ace <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e000      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3718      	adds	r7, #24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40007000 	.word	0x40007000
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	42470060 	.word	0x42470060

08002ae4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e0cc      	b.n	8002c92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002af8:	4b68      	ldr	r3, [pc, #416]	; (8002c9c <HAL_RCC_ClockConfig+0x1b8>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d90c      	bls.n	8002b20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b06:	4b65      	ldr	r3, [pc, #404]	; (8002c9c <HAL_RCC_ClockConfig+0x1b8>)
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b0e:	4b63      	ldr	r3, [pc, #396]	; (8002c9c <HAL_RCC_ClockConfig+0x1b8>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d001      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e0b8      	b.n	8002c92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d020      	beq.n	8002b6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d005      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b38:	4b59      	ldr	r3, [pc, #356]	; (8002ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	4a58      	ldr	r2, [pc, #352]	; (8002ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0308 	and.w	r3, r3, #8
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d005      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b50:	4b53      	ldr	r3, [pc, #332]	; (8002ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	4a52      	ldr	r2, [pc, #328]	; (8002ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b5c:	4b50      	ldr	r3, [pc, #320]	; (8002ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	494d      	ldr	r1, [pc, #308]	; (8002ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d044      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d107      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b82:	4b47      	ldr	r3, [pc, #284]	; (8002ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d119      	bne.n	8002bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e07f      	b.n	8002c92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d003      	beq.n	8002ba2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b9e:	2b03      	cmp	r3, #3
 8002ba0:	d107      	bne.n	8002bb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba2:	4b3f      	ldr	r3, [pc, #252]	; (8002ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d109      	bne.n	8002bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e06f      	b.n	8002c92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb2:	4b3b      	ldr	r3, [pc, #236]	; (8002ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e067      	b.n	8002c92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bc2:	4b37      	ldr	r3, [pc, #220]	; (8002ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f023 0203 	bic.w	r2, r3, #3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	4934      	ldr	r1, [pc, #208]	; (8002ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bd4:	f7fe fa94 	bl	8001100 <HAL_GetTick>
 8002bd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bda:	e00a      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bdc:	f7fe fa90 	bl	8001100 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e04f      	b.n	8002c92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf2:	4b2b      	ldr	r3, [pc, #172]	; (8002ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 020c 	and.w	r2, r3, #12
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d1eb      	bne.n	8002bdc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c04:	4b25      	ldr	r3, [pc, #148]	; (8002c9c <HAL_RCC_ClockConfig+0x1b8>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d20c      	bcs.n	8002c2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c12:	4b22      	ldr	r3, [pc, #136]	; (8002c9c <HAL_RCC_ClockConfig+0x1b8>)
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1a:	4b20      	ldr	r3, [pc, #128]	; (8002c9c <HAL_RCC_ClockConfig+0x1b8>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d001      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e032      	b.n	8002c92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d008      	beq.n	8002c4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c38:	4b19      	ldr	r3, [pc, #100]	; (8002ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	4916      	ldr	r1, [pc, #88]	; (8002ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d009      	beq.n	8002c6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c56:	4b12      	ldr	r3, [pc, #72]	; (8002ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	490e      	ldr	r1, [pc, #56]	; (8002ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c6a:	f000 f821 	bl	8002cb0 <HAL_RCC_GetSysClockFreq>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	4b0b      	ldr	r3, [pc, #44]	; (8002ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	091b      	lsrs	r3, r3, #4
 8002c76:	f003 030f 	and.w	r3, r3, #15
 8002c7a:	490a      	ldr	r1, [pc, #40]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c7c:	5ccb      	ldrb	r3, [r1, r3]
 8002c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c82:	4a09      	ldr	r2, [pc, #36]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c86:	4b09      	ldr	r3, [pc, #36]	; (8002cac <HAL_RCC_ClockConfig+0x1c8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fe f9f4 	bl	8001078 <HAL_InitTick>

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40023c00 	.word	0x40023c00
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	08004efc 	.word	0x08004efc
 8002ca8:	20000004 	.word	0x20000004
 8002cac:	20000008 	.word	0x20000008

08002cb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002cb4:	b084      	sub	sp, #16
 8002cb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	607b      	str	r3, [r7, #4]
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cc8:	4b67      	ldr	r3, [pc, #412]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 030c 	and.w	r3, r3, #12
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	d00d      	beq.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x40>
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	f200 80bd 	bhi.w	8002e54 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d002      	beq.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x34>
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d003      	beq.n	8002cea <HAL_RCC_GetSysClockFreq+0x3a>
 8002ce2:	e0b7      	b.n	8002e54 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ce4:	4b61      	ldr	r3, [pc, #388]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002ce6:	60bb      	str	r3, [r7, #8]
       break;
 8002ce8:	e0b7      	b.n	8002e5a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cea:	4b61      	ldr	r3, [pc, #388]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002cec:	60bb      	str	r3, [r7, #8]
      break;
 8002cee:	e0b4      	b.n	8002e5a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cf0:	4b5d      	ldr	r3, [pc, #372]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cf8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cfa:	4b5b      	ldr	r3, [pc, #364]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d04d      	beq.n	8002da2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d06:	4b58      	ldr	r3, [pc, #352]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	099b      	lsrs	r3, r3, #6
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	f04f 0300 	mov.w	r3, #0
 8002d12:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d16:	f04f 0100 	mov.w	r1, #0
 8002d1a:	ea02 0800 	and.w	r8, r2, r0
 8002d1e:	ea03 0901 	and.w	r9, r3, r1
 8002d22:	4640      	mov	r0, r8
 8002d24:	4649      	mov	r1, r9
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	f04f 0300 	mov.w	r3, #0
 8002d2e:	014b      	lsls	r3, r1, #5
 8002d30:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d34:	0142      	lsls	r2, r0, #5
 8002d36:	4610      	mov	r0, r2
 8002d38:	4619      	mov	r1, r3
 8002d3a:	ebb0 0008 	subs.w	r0, r0, r8
 8002d3e:	eb61 0109 	sbc.w	r1, r1, r9
 8002d42:	f04f 0200 	mov.w	r2, #0
 8002d46:	f04f 0300 	mov.w	r3, #0
 8002d4a:	018b      	lsls	r3, r1, #6
 8002d4c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d50:	0182      	lsls	r2, r0, #6
 8002d52:	1a12      	subs	r2, r2, r0
 8002d54:	eb63 0301 	sbc.w	r3, r3, r1
 8002d58:	f04f 0000 	mov.w	r0, #0
 8002d5c:	f04f 0100 	mov.w	r1, #0
 8002d60:	00d9      	lsls	r1, r3, #3
 8002d62:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d66:	00d0      	lsls	r0, r2, #3
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	eb12 0208 	adds.w	r2, r2, r8
 8002d70:	eb43 0309 	adc.w	r3, r3, r9
 8002d74:	f04f 0000 	mov.w	r0, #0
 8002d78:	f04f 0100 	mov.w	r1, #0
 8002d7c:	0259      	lsls	r1, r3, #9
 8002d7e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002d82:	0250      	lsls	r0, r2, #9
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	4610      	mov	r0, r2
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	f04f 0300 	mov.w	r3, #0
 8002d94:	f7fd fa74 	bl	8000280 <__aeabi_uldivmod>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	e04a      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002da2:	4b31      	ldr	r3, [pc, #196]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	099b      	lsrs	r3, r3, #6
 8002da8:	461a      	mov	r2, r3
 8002daa:	f04f 0300 	mov.w	r3, #0
 8002dae:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002db2:	f04f 0100 	mov.w	r1, #0
 8002db6:	ea02 0400 	and.w	r4, r2, r0
 8002dba:	ea03 0501 	and.w	r5, r3, r1
 8002dbe:	4620      	mov	r0, r4
 8002dc0:	4629      	mov	r1, r5
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	f04f 0300 	mov.w	r3, #0
 8002dca:	014b      	lsls	r3, r1, #5
 8002dcc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002dd0:	0142      	lsls	r2, r0, #5
 8002dd2:	4610      	mov	r0, r2
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	1b00      	subs	r0, r0, r4
 8002dd8:	eb61 0105 	sbc.w	r1, r1, r5
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	f04f 0300 	mov.w	r3, #0
 8002de4:	018b      	lsls	r3, r1, #6
 8002de6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002dea:	0182      	lsls	r2, r0, #6
 8002dec:	1a12      	subs	r2, r2, r0
 8002dee:	eb63 0301 	sbc.w	r3, r3, r1
 8002df2:	f04f 0000 	mov.w	r0, #0
 8002df6:	f04f 0100 	mov.w	r1, #0
 8002dfa:	00d9      	lsls	r1, r3, #3
 8002dfc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e00:	00d0      	lsls	r0, r2, #3
 8002e02:	4602      	mov	r2, r0
 8002e04:	460b      	mov	r3, r1
 8002e06:	1912      	adds	r2, r2, r4
 8002e08:	eb45 0303 	adc.w	r3, r5, r3
 8002e0c:	f04f 0000 	mov.w	r0, #0
 8002e10:	f04f 0100 	mov.w	r1, #0
 8002e14:	0299      	lsls	r1, r3, #10
 8002e16:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002e1a:	0290      	lsls	r0, r2, #10
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	4610      	mov	r0, r2
 8002e22:	4619      	mov	r1, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	461a      	mov	r2, r3
 8002e28:	f04f 0300 	mov.w	r3, #0
 8002e2c:	f7fd fa28 	bl	8000280 <__aeabi_uldivmod>
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	4613      	mov	r3, r2
 8002e36:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e38:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	0c1b      	lsrs	r3, r3, #16
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	3301      	adds	r3, #1
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e50:	60bb      	str	r3, [r7, #8]
      break;
 8002e52:	e002      	b.n	8002e5a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e54:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002e56:	60bb      	str	r3, [r7, #8]
      break;
 8002e58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e5a:	68bb      	ldr	r3, [r7, #8]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e66:	bf00      	nop
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	00f42400 	.word	0x00f42400
 8002e70:	007a1200 	.word	0x007a1200

08002e74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e78:	4b03      	ldr	r3, [pc, #12]	; (8002e88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	20000004 	.word	0x20000004

08002e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e90:	f7ff fff0 	bl	8002e74 <HAL_RCC_GetHCLKFreq>
 8002e94:	4602      	mov	r2, r0
 8002e96:	4b05      	ldr	r3, [pc, #20]	; (8002eac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	0a9b      	lsrs	r3, r3, #10
 8002e9c:	f003 0307 	and.w	r3, r3, #7
 8002ea0:	4903      	ldr	r1, [pc, #12]	; (8002eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ea2:	5ccb      	ldrb	r3, [r1, r3]
 8002ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	08004f0c 	.word	0x08004f0c

08002eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002eb8:	f7ff ffdc 	bl	8002e74 <HAL_RCC_GetHCLKFreq>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	4b05      	ldr	r3, [pc, #20]	; (8002ed4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	0b5b      	lsrs	r3, r3, #13
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	4903      	ldr	r1, [pc, #12]	; (8002ed8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eca:	5ccb      	ldrb	r3, [r1, r3]
 8002ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	08004f0c 	.word	0x08004f0c

08002edc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e041      	b.n	8002f72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d106      	bne.n	8002f08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7fd feee 	bl	8000ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3304      	adds	r3, #4
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4610      	mov	r0, r2
 8002f1c:	f000 fae2 	bl	80034e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d001      	beq.n	8002f94 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e03c      	b.n	800300e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a1e      	ldr	r2, [pc, #120]	; (800301c <HAL_TIM_Base_Start+0xa0>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d018      	beq.n	8002fd8 <HAL_TIM_Base_Start+0x5c>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fae:	d013      	beq.n	8002fd8 <HAL_TIM_Base_Start+0x5c>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a1a      	ldr	r2, [pc, #104]	; (8003020 <HAL_TIM_Base_Start+0xa4>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d00e      	beq.n	8002fd8 <HAL_TIM_Base_Start+0x5c>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a19      	ldr	r2, [pc, #100]	; (8003024 <HAL_TIM_Base_Start+0xa8>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d009      	beq.n	8002fd8 <HAL_TIM_Base_Start+0x5c>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a17      	ldr	r2, [pc, #92]	; (8003028 <HAL_TIM_Base_Start+0xac>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d004      	beq.n	8002fd8 <HAL_TIM_Base_Start+0x5c>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a16      	ldr	r2, [pc, #88]	; (800302c <HAL_TIM_Base_Start+0xb0>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d111      	bne.n	8002ffc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2b06      	cmp	r3, #6
 8002fe8:	d010      	beq.n	800300c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f042 0201 	orr.w	r2, r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ffa:	e007      	b.n	800300c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0201 	orr.w	r2, r2, #1
 800300a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	40010000 	.word	0x40010000
 8003020:	40000400 	.word	0x40000400
 8003024:	40000800 	.word	0x40000800
 8003028:	40000c00 	.word	0x40000c00
 800302c:	40014000 	.word	0x40014000

08003030 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b01      	cmp	r3, #1
 8003042:	d001      	beq.n	8003048 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e044      	b.n	80030d2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2202      	movs	r2, #2
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 0201 	orr.w	r2, r2, #1
 800305e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a1e      	ldr	r2, [pc, #120]	; (80030e0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d018      	beq.n	800309c <HAL_TIM_Base_Start_IT+0x6c>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003072:	d013      	beq.n	800309c <HAL_TIM_Base_Start_IT+0x6c>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a1a      	ldr	r2, [pc, #104]	; (80030e4 <HAL_TIM_Base_Start_IT+0xb4>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d00e      	beq.n	800309c <HAL_TIM_Base_Start_IT+0x6c>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a19      	ldr	r2, [pc, #100]	; (80030e8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d009      	beq.n	800309c <HAL_TIM_Base_Start_IT+0x6c>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a17      	ldr	r2, [pc, #92]	; (80030ec <HAL_TIM_Base_Start_IT+0xbc>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d004      	beq.n	800309c <HAL_TIM_Base_Start_IT+0x6c>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a16      	ldr	r2, [pc, #88]	; (80030f0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d111      	bne.n	80030c0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2b06      	cmp	r3, #6
 80030ac:	d010      	beq.n	80030d0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f042 0201 	orr.w	r2, r2, #1
 80030bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030be:	e007      	b.n	80030d0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0201 	orr.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3714      	adds	r7, #20
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	40010000 	.word	0x40010000
 80030e4:	40000400 	.word	0x40000400
 80030e8:	40000800 	.word	0x40000800
 80030ec:	40000c00 	.word	0x40000c00
 80030f0:	40014000 	.word	0x40014000

080030f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b02      	cmp	r3, #2
 8003108:	d122      	bne.n	8003150 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b02      	cmp	r3, #2
 8003116:	d11b      	bne.n	8003150 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f06f 0202 	mvn.w	r2, #2
 8003120:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f9b5 	bl	80034a6 <HAL_TIM_IC_CaptureCallback>
 800313c:	e005      	b.n	800314a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f9a7 	bl	8003492 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 f9b8 	bl	80034ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	f003 0304 	and.w	r3, r3, #4
 800315a:	2b04      	cmp	r3, #4
 800315c:	d122      	bne.n	80031a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f003 0304 	and.w	r3, r3, #4
 8003168:	2b04      	cmp	r3, #4
 800316a:	d11b      	bne.n	80031a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f06f 0204 	mvn.w	r2, #4
 8003174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2202      	movs	r2, #2
 800317a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f98b 	bl	80034a6 <HAL_TIM_IC_CaptureCallback>
 8003190:	e005      	b.n	800319e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f97d 	bl	8003492 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 f98e 	bl	80034ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	2b08      	cmp	r3, #8
 80031b0:	d122      	bne.n	80031f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f003 0308 	and.w	r3, r3, #8
 80031bc:	2b08      	cmp	r3, #8
 80031be:	d11b      	bne.n	80031f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f06f 0208 	mvn.w	r2, #8
 80031c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2204      	movs	r2, #4
 80031ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	f003 0303 	and.w	r3, r3, #3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f961 	bl	80034a6 <HAL_TIM_IC_CaptureCallback>
 80031e4:	e005      	b.n	80031f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f953 	bl	8003492 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f964 	bl	80034ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	f003 0310 	and.w	r3, r3, #16
 8003202:	2b10      	cmp	r3, #16
 8003204:	d122      	bne.n	800324c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f003 0310 	and.w	r3, r3, #16
 8003210:	2b10      	cmp	r3, #16
 8003212:	d11b      	bne.n	800324c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f06f 0210 	mvn.w	r2, #16
 800321c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2208      	movs	r2, #8
 8003222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f937 	bl	80034a6 <HAL_TIM_IC_CaptureCallback>
 8003238:	e005      	b.n	8003246 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f929 	bl	8003492 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 f93a 	bl	80034ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b01      	cmp	r3, #1
 8003258:	d10e      	bne.n	8003278 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b01      	cmp	r3, #1
 8003266:	d107      	bne.n	8003278 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f06f 0201 	mvn.w	r2, #1
 8003270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7fd fc58 	bl	8000b28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003282:	2b80      	cmp	r3, #128	; 0x80
 8003284:	d10e      	bne.n	80032a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003290:	2b80      	cmp	r3, #128	; 0x80
 8003292:	d107      	bne.n	80032a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800329c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 fab2 	bl	8003808 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ae:	2b40      	cmp	r3, #64	; 0x40
 80032b0:	d10e      	bne.n	80032d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032bc:	2b40      	cmp	r3, #64	; 0x40
 80032be:	d107      	bne.n	80032d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f8ff 	bl	80034ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	f003 0320 	and.w	r3, r3, #32
 80032da:	2b20      	cmp	r3, #32
 80032dc:	d10e      	bne.n	80032fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	f003 0320 	and.w	r3, r3, #32
 80032e8:	2b20      	cmp	r3, #32
 80032ea:	d107      	bne.n	80032fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f06f 0220 	mvn.w	r2, #32
 80032f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 fa7c 	bl	80037f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032fc:	bf00      	nop
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800330e:	2300      	movs	r3, #0
 8003310:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003318:	2b01      	cmp	r3, #1
 800331a:	d101      	bne.n	8003320 <HAL_TIM_ConfigClockSource+0x1c>
 800331c:	2302      	movs	r3, #2
 800331e:	e0b4      	b.n	800348a <HAL_TIM_ConfigClockSource+0x186>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2202      	movs	r2, #2
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800333e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003346:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003358:	d03e      	beq.n	80033d8 <HAL_TIM_ConfigClockSource+0xd4>
 800335a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800335e:	f200 8087 	bhi.w	8003470 <HAL_TIM_ConfigClockSource+0x16c>
 8003362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003366:	f000 8086 	beq.w	8003476 <HAL_TIM_ConfigClockSource+0x172>
 800336a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800336e:	d87f      	bhi.n	8003470 <HAL_TIM_ConfigClockSource+0x16c>
 8003370:	2b70      	cmp	r3, #112	; 0x70
 8003372:	d01a      	beq.n	80033aa <HAL_TIM_ConfigClockSource+0xa6>
 8003374:	2b70      	cmp	r3, #112	; 0x70
 8003376:	d87b      	bhi.n	8003470 <HAL_TIM_ConfigClockSource+0x16c>
 8003378:	2b60      	cmp	r3, #96	; 0x60
 800337a:	d050      	beq.n	800341e <HAL_TIM_ConfigClockSource+0x11a>
 800337c:	2b60      	cmp	r3, #96	; 0x60
 800337e:	d877      	bhi.n	8003470 <HAL_TIM_ConfigClockSource+0x16c>
 8003380:	2b50      	cmp	r3, #80	; 0x50
 8003382:	d03c      	beq.n	80033fe <HAL_TIM_ConfigClockSource+0xfa>
 8003384:	2b50      	cmp	r3, #80	; 0x50
 8003386:	d873      	bhi.n	8003470 <HAL_TIM_ConfigClockSource+0x16c>
 8003388:	2b40      	cmp	r3, #64	; 0x40
 800338a:	d058      	beq.n	800343e <HAL_TIM_ConfigClockSource+0x13a>
 800338c:	2b40      	cmp	r3, #64	; 0x40
 800338e:	d86f      	bhi.n	8003470 <HAL_TIM_ConfigClockSource+0x16c>
 8003390:	2b30      	cmp	r3, #48	; 0x30
 8003392:	d064      	beq.n	800345e <HAL_TIM_ConfigClockSource+0x15a>
 8003394:	2b30      	cmp	r3, #48	; 0x30
 8003396:	d86b      	bhi.n	8003470 <HAL_TIM_ConfigClockSource+0x16c>
 8003398:	2b20      	cmp	r3, #32
 800339a:	d060      	beq.n	800345e <HAL_TIM_ConfigClockSource+0x15a>
 800339c:	2b20      	cmp	r3, #32
 800339e:	d867      	bhi.n	8003470 <HAL_TIM_ConfigClockSource+0x16c>
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d05c      	beq.n	800345e <HAL_TIM_ConfigClockSource+0x15a>
 80033a4:	2b10      	cmp	r3, #16
 80033a6:	d05a      	beq.n	800345e <HAL_TIM_ConfigClockSource+0x15a>
 80033a8:	e062      	b.n	8003470 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6818      	ldr	r0, [r3, #0]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	6899      	ldr	r1, [r3, #8]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f000 f98d 	bl	80036d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	609a      	str	r2, [r3, #8]
      break;
 80033d6:	e04f      	b.n	8003478 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6818      	ldr	r0, [r3, #0]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	6899      	ldr	r1, [r3, #8]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f000 f976 	bl	80036d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689a      	ldr	r2, [r3, #8]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033fa:	609a      	str	r2, [r3, #8]
      break;
 80033fc:	e03c      	b.n	8003478 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6818      	ldr	r0, [r3, #0]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	6859      	ldr	r1, [r3, #4]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	461a      	mov	r2, r3
 800340c:	f000 f8ea 	bl	80035e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2150      	movs	r1, #80	; 0x50
 8003416:	4618      	mov	r0, r3
 8003418:	f000 f943 	bl	80036a2 <TIM_ITRx_SetConfig>
      break;
 800341c:	e02c      	b.n	8003478 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6818      	ldr	r0, [r3, #0]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	6859      	ldr	r1, [r3, #4]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	461a      	mov	r2, r3
 800342c:	f000 f909 	bl	8003642 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2160      	movs	r1, #96	; 0x60
 8003436:	4618      	mov	r0, r3
 8003438:	f000 f933 	bl	80036a2 <TIM_ITRx_SetConfig>
      break;
 800343c:	e01c      	b.n	8003478 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6818      	ldr	r0, [r3, #0]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	6859      	ldr	r1, [r3, #4]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	461a      	mov	r2, r3
 800344c:	f000 f8ca 	bl	80035e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2140      	movs	r1, #64	; 0x40
 8003456:	4618      	mov	r0, r3
 8003458:	f000 f923 	bl	80036a2 <TIM_ITRx_SetConfig>
      break;
 800345c:	e00c      	b.n	8003478 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4619      	mov	r1, r3
 8003468:	4610      	mov	r0, r2
 800346a:	f000 f91a 	bl	80036a2 <TIM_ITRx_SetConfig>
      break;
 800346e:	e003      	b.n	8003478 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	73fb      	strb	r3, [r7, #15]
      break;
 8003474:	e000      	b.n	8003478 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003476:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003488:	7bfb      	ldrb	r3, [r7, #15]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800349a:	bf00      	nop
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
	...

080034e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a34      	ldr	r2, [pc, #208]	; (80035c8 <TIM_Base_SetConfig+0xe4>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d00f      	beq.n	800351c <TIM_Base_SetConfig+0x38>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003502:	d00b      	beq.n	800351c <TIM_Base_SetConfig+0x38>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a31      	ldr	r2, [pc, #196]	; (80035cc <TIM_Base_SetConfig+0xe8>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d007      	beq.n	800351c <TIM_Base_SetConfig+0x38>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a30      	ldr	r2, [pc, #192]	; (80035d0 <TIM_Base_SetConfig+0xec>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d003      	beq.n	800351c <TIM_Base_SetConfig+0x38>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a2f      	ldr	r2, [pc, #188]	; (80035d4 <TIM_Base_SetConfig+0xf0>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d108      	bne.n	800352e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003522:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	4313      	orrs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a25      	ldr	r2, [pc, #148]	; (80035c8 <TIM_Base_SetConfig+0xe4>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d01b      	beq.n	800356e <TIM_Base_SetConfig+0x8a>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800353c:	d017      	beq.n	800356e <TIM_Base_SetConfig+0x8a>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a22      	ldr	r2, [pc, #136]	; (80035cc <TIM_Base_SetConfig+0xe8>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d013      	beq.n	800356e <TIM_Base_SetConfig+0x8a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a21      	ldr	r2, [pc, #132]	; (80035d0 <TIM_Base_SetConfig+0xec>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d00f      	beq.n	800356e <TIM_Base_SetConfig+0x8a>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a20      	ldr	r2, [pc, #128]	; (80035d4 <TIM_Base_SetConfig+0xf0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d00b      	beq.n	800356e <TIM_Base_SetConfig+0x8a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a1f      	ldr	r2, [pc, #124]	; (80035d8 <TIM_Base_SetConfig+0xf4>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d007      	beq.n	800356e <TIM_Base_SetConfig+0x8a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a1e      	ldr	r2, [pc, #120]	; (80035dc <TIM_Base_SetConfig+0xf8>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d003      	beq.n	800356e <TIM_Base_SetConfig+0x8a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a1d      	ldr	r2, [pc, #116]	; (80035e0 <TIM_Base_SetConfig+0xfc>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d108      	bne.n	8003580 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003574:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	4313      	orrs	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	4313      	orrs	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a08      	ldr	r2, [pc, #32]	; (80035c8 <TIM_Base_SetConfig+0xe4>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d103      	bne.n	80035b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	691a      	ldr	r2, [r3, #16]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	615a      	str	r2, [r3, #20]
}
 80035ba:	bf00      	nop
 80035bc:	3714      	adds	r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	40010000 	.word	0x40010000
 80035cc:	40000400 	.word	0x40000400
 80035d0:	40000800 	.word	0x40000800
 80035d4:	40000c00 	.word	0x40000c00
 80035d8:	40014000 	.word	0x40014000
 80035dc:	40014400 	.word	0x40014400
 80035e0:	40014800 	.word	0x40014800

080035e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	f023 0201 	bic.w	r2, r3, #1
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800360e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4313      	orrs	r3, r2
 8003618:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f023 030a 	bic.w	r3, r3, #10
 8003620:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	4313      	orrs	r3, r2
 8003628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	621a      	str	r2, [r3, #32]
}
 8003636:	bf00      	nop
 8003638:	371c      	adds	r7, #28
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003642:	b480      	push	{r7}
 8003644:	b087      	sub	sp, #28
 8003646:	af00      	add	r7, sp, #0
 8003648:	60f8      	str	r0, [r7, #12]
 800364a:	60b9      	str	r1, [r7, #8]
 800364c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	f023 0210 	bic.w	r2, r3, #16
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800366c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	031b      	lsls	r3, r3, #12
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	4313      	orrs	r3, r2
 8003676:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800367e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	4313      	orrs	r3, r2
 8003688:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	621a      	str	r2, [r3, #32]
}
 8003696:	bf00      	nop
 8003698:	371c      	adds	r7, #28
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b085      	sub	sp, #20
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
 80036aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4313      	orrs	r3, r2
 80036c0:	f043 0307 	orr.w	r3, r3, #7
 80036c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	609a      	str	r2, [r3, #8]
}
 80036cc:	bf00      	nop
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036d8:	b480      	push	{r7}
 80036da:	b087      	sub	sp, #28
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
 80036e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	021a      	lsls	r2, r3, #8
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	431a      	orrs	r2, r3
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	4313      	orrs	r3, r2
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	4313      	orrs	r3, r2
 8003704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	609a      	str	r2, [r3, #8]
}
 800370c:	bf00      	nop
 800370e:	371c      	adds	r7, #28
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800372c:	2302      	movs	r3, #2
 800372e:	e050      	b.n	80037d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003756:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	4313      	orrs	r3, r2
 8003760:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a1c      	ldr	r2, [pc, #112]	; (80037e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d018      	beq.n	80037a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800377c:	d013      	beq.n	80037a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a18      	ldr	r2, [pc, #96]	; (80037e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d00e      	beq.n	80037a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a16      	ldr	r2, [pc, #88]	; (80037e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d009      	beq.n	80037a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a15      	ldr	r2, [pc, #84]	; (80037ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d004      	beq.n	80037a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a13      	ldr	r2, [pc, #76]	; (80037f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d10c      	bne.n	80037c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	40010000 	.word	0x40010000
 80037e4:	40000400 	.word	0x40000400
 80037e8:	40000800 	.word	0x40000800
 80037ec:	40000c00 	.word	0x40000c00
 80037f0:	40014000 	.word	0x40014000

080037f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e03f      	b.n	80038ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d106      	bne.n	8003848 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7fd fa8a 	bl	8000d5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2224      	movs	r2, #36	; 0x24
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800385e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f9cb 	bl	8003bfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	691a      	ldr	r2, [r3, #16]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003874:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695a      	ldr	r2, [r3, #20]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003884:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68da      	ldr	r2, [r3, #12]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003894:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2220      	movs	r2, #32
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b08a      	sub	sp, #40	; 0x28
 80038ba:	af02      	add	r7, sp, #8
 80038bc:	60f8      	str	r0, [r7, #12]
 80038be:	60b9      	str	r1, [r7, #8]
 80038c0:	603b      	str	r3, [r7, #0]
 80038c2:	4613      	mov	r3, r2
 80038c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038c6:	2300      	movs	r3, #0
 80038c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b20      	cmp	r3, #32
 80038d4:	d17c      	bne.n	80039d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d002      	beq.n	80038e2 <HAL_UART_Transmit+0x2c>
 80038dc:	88fb      	ldrh	r3, [r7, #6]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e075      	b.n	80039d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d101      	bne.n	80038f4 <HAL_UART_Transmit+0x3e>
 80038f0:	2302      	movs	r3, #2
 80038f2:	e06e      	b.n	80039d2 <HAL_UART_Transmit+0x11c>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2221      	movs	r2, #33	; 0x21
 8003906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800390a:	f7fd fbf9 	bl	8001100 <HAL_GetTick>
 800390e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	88fa      	ldrh	r2, [r7, #6]
 8003914:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	88fa      	ldrh	r2, [r7, #6]
 800391a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003924:	d108      	bne.n	8003938 <HAL_UART_Transmit+0x82>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d104      	bne.n	8003938 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800392e:	2300      	movs	r3, #0
 8003930:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	61bb      	str	r3, [r7, #24]
 8003936:	e003      	b.n	8003940 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800393c:	2300      	movs	r3, #0
 800393e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003948:	e02a      	b.n	80039a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2200      	movs	r2, #0
 8003952:	2180      	movs	r1, #128	; 0x80
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 f8e2 	bl	8003b1e <UART_WaitOnFlagUntilTimeout>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e036      	b.n	80039d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10b      	bne.n	8003982 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	881b      	ldrh	r3, [r3, #0]
 800396e:	461a      	mov	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003978:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	3302      	adds	r3, #2
 800397e:	61bb      	str	r3, [r7, #24]
 8003980:	e007      	b.n	8003992 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	781a      	ldrb	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	3301      	adds	r3, #1
 8003990:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003996:	b29b      	uxth	r3, r3
 8003998:	3b01      	subs	r3, #1
 800399a:	b29a      	uxth	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1cf      	bne.n	800394a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2200      	movs	r2, #0
 80039b2:	2140      	movs	r1, #64	; 0x40
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f000 f8b2 	bl	8003b1e <UART_WaitOnFlagUntilTimeout>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e006      	b.n	80039d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2220      	movs	r2, #32
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80039cc:	2300      	movs	r3, #0
 80039ce:	e000      	b.n	80039d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80039d0:	2302      	movs	r3, #2
  }
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3720      	adds	r7, #32
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b08a      	sub	sp, #40	; 0x28
 80039de:	af02      	add	r7, sp, #8
 80039e0:	60f8      	str	r0, [r7, #12]
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	603b      	str	r3, [r7, #0]
 80039e6:	4613      	mov	r3, r2
 80039e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b20      	cmp	r3, #32
 80039f8:	f040 808c 	bne.w	8003b14 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d002      	beq.n	8003a08 <HAL_UART_Receive+0x2e>
 8003a02:	88fb      	ldrh	r3, [r7, #6]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e084      	b.n	8003b16 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d101      	bne.n	8003a1a <HAL_UART_Receive+0x40>
 8003a16:	2302      	movs	r3, #2
 8003a18:	e07d      	b.n	8003b16 <HAL_UART_Receive+0x13c>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2222      	movs	r2, #34	; 0x22
 8003a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a36:	f7fd fb63 	bl	8001100 <HAL_GetTick>
 8003a3a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	88fa      	ldrh	r2, [r7, #6]
 8003a40:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	88fa      	ldrh	r2, [r7, #6]
 8003a46:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a50:	d108      	bne.n	8003a64 <HAL_UART_Receive+0x8a>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d104      	bne.n	8003a64 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	61bb      	str	r3, [r7, #24]
 8003a62:	e003      	b.n	8003a6c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003a74:	e043      	b.n	8003afe <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	2120      	movs	r1, #32
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f000 f84c 	bl	8003b1e <UART_WaitOnFlagUntilTimeout>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e042      	b.n	8003b16 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10c      	bne.n	8003ab0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	3302      	adds	r3, #2
 8003aac:	61bb      	str	r3, [r7, #24]
 8003aae:	e01f      	b.n	8003af0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab8:	d007      	beq.n	8003aca <HAL_UART_Receive+0xf0>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10a      	bne.n	8003ad8 <HAL_UART_Receive+0xfe>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d106      	bne.n	8003ad8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	b2da      	uxtb	r2, r3
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	701a      	strb	r2, [r3, #0]
 8003ad6:	e008      	b.n	8003aea <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	3301      	adds	r3, #1
 8003aee:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	3b01      	subs	r3, #1
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1b6      	bne.n	8003a76 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003b10:	2300      	movs	r3, #0
 8003b12:	e000      	b.n	8003b16 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003b14:	2302      	movs	r3, #2
  }
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3720      	adds	r7, #32
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b090      	sub	sp, #64	; 0x40
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	60f8      	str	r0, [r7, #12]
 8003b26:	60b9      	str	r1, [r7, #8]
 8003b28:	603b      	str	r3, [r7, #0]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b2e:	e050      	b.n	8003bd2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b36:	d04c      	beq.n	8003bd2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d007      	beq.n	8003b4e <UART_WaitOnFlagUntilTimeout+0x30>
 8003b3e:	f7fd fadf 	bl	8001100 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d241      	bcs.n	8003bd2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	330c      	adds	r3, #12
 8003b54:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b58:	e853 3f00 	ldrex	r3, [r3]
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	330c      	adds	r3, #12
 8003b6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b6e:	637a      	str	r2, [r7, #52]	; 0x34
 8003b70:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b76:	e841 2300 	strex	r3, r2, [r1]
 8003b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1e5      	bne.n	8003b4e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	3314      	adds	r3, #20
 8003b88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	e853 3f00 	ldrex	r3, [r3]
 8003b90:	613b      	str	r3, [r7, #16]
   return(result);
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f023 0301 	bic.w	r3, r3, #1
 8003b98:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	3314      	adds	r3, #20
 8003ba0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ba2:	623a      	str	r2, [r7, #32]
 8003ba4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba6:	69f9      	ldr	r1, [r7, #28]
 8003ba8:	6a3a      	ldr	r2, [r7, #32]
 8003baa:	e841 2300 	strex	r3, r2, [r1]
 8003bae:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1e5      	bne.n	8003b82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2220      	movs	r2, #32
 8003bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e00f      	b.n	8003bf2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	bf0c      	ite	eq
 8003be2:	2301      	moveq	r3, #1
 8003be4:	2300      	movne	r3, #0
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	461a      	mov	r2, r3
 8003bea:	79fb      	ldrb	r3, [r7, #7]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d09f      	beq.n	8003b30 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3740      	adds	r7, #64	; 0x40
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
	...

08003bfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c00:	b09f      	sub	sp, #124	; 0x7c
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c12:	68d9      	ldr	r1, [r3, #12]
 8003c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	ea40 0301 	orr.w	r3, r0, r1
 8003c1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c20:	689a      	ldr	r2, [r3, #8]
 8003c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	431a      	orrs	r2, r3
 8003c28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c40:	f021 010c 	bic.w	r1, r1, #12
 8003c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c4a:	430b      	orrs	r3, r1
 8003c4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c5a:	6999      	ldr	r1, [r3, #24]
 8003c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	ea40 0301 	orr.w	r3, r0, r1
 8003c64:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	4bc5      	ldr	r3, [pc, #788]	; (8003f80 <UART_SetConfig+0x384>)
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d004      	beq.n	8003c7a <UART_SetConfig+0x7e>
 8003c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	4bc3      	ldr	r3, [pc, #780]	; (8003f84 <UART_SetConfig+0x388>)
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d103      	bne.n	8003c82 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c7a:	f7ff f91b 	bl	8002eb4 <HAL_RCC_GetPCLK2Freq>
 8003c7e:	6778      	str	r0, [r7, #116]	; 0x74
 8003c80:	e002      	b.n	8003c88 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c82:	f7ff f903 	bl	8002e8c <HAL_RCC_GetPCLK1Freq>
 8003c86:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c8a:	69db      	ldr	r3, [r3, #28]
 8003c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c90:	f040 80b6 	bne.w	8003e00 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c96:	461c      	mov	r4, r3
 8003c98:	f04f 0500 	mov.w	r5, #0
 8003c9c:	4622      	mov	r2, r4
 8003c9e:	462b      	mov	r3, r5
 8003ca0:	1891      	adds	r1, r2, r2
 8003ca2:	6439      	str	r1, [r7, #64]	; 0x40
 8003ca4:	415b      	adcs	r3, r3
 8003ca6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ca8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003cac:	1912      	adds	r2, r2, r4
 8003cae:	eb45 0303 	adc.w	r3, r5, r3
 8003cb2:	f04f 0000 	mov.w	r0, #0
 8003cb6:	f04f 0100 	mov.w	r1, #0
 8003cba:	00d9      	lsls	r1, r3, #3
 8003cbc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003cc0:	00d0      	lsls	r0, r2, #3
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	1911      	adds	r1, r2, r4
 8003cc8:	6639      	str	r1, [r7, #96]	; 0x60
 8003cca:	416b      	adcs	r3, r5
 8003ccc:	667b      	str	r3, [r7, #100]	; 0x64
 8003cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	f04f 0300 	mov.w	r3, #0
 8003cd8:	1891      	adds	r1, r2, r2
 8003cda:	63b9      	str	r1, [r7, #56]	; 0x38
 8003cdc:	415b      	adcs	r3, r3
 8003cde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ce0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ce4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003ce8:	f7fc faca 	bl	8000280 <__aeabi_uldivmod>
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4ba5      	ldr	r3, [pc, #660]	; (8003f88 <UART_SetConfig+0x38c>)
 8003cf2:	fba3 2302 	umull	r2, r3, r3, r2
 8003cf6:	095b      	lsrs	r3, r3, #5
 8003cf8:	011e      	lsls	r6, r3, #4
 8003cfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cfc:	461c      	mov	r4, r3
 8003cfe:	f04f 0500 	mov.w	r5, #0
 8003d02:	4622      	mov	r2, r4
 8003d04:	462b      	mov	r3, r5
 8003d06:	1891      	adds	r1, r2, r2
 8003d08:	6339      	str	r1, [r7, #48]	; 0x30
 8003d0a:	415b      	adcs	r3, r3
 8003d0c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d0e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003d12:	1912      	adds	r2, r2, r4
 8003d14:	eb45 0303 	adc.w	r3, r5, r3
 8003d18:	f04f 0000 	mov.w	r0, #0
 8003d1c:	f04f 0100 	mov.w	r1, #0
 8003d20:	00d9      	lsls	r1, r3, #3
 8003d22:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d26:	00d0      	lsls	r0, r2, #3
 8003d28:	4602      	mov	r2, r0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	1911      	adds	r1, r2, r4
 8003d2e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d30:	416b      	adcs	r3, r5
 8003d32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	461a      	mov	r2, r3
 8003d3a:	f04f 0300 	mov.w	r3, #0
 8003d3e:	1891      	adds	r1, r2, r2
 8003d40:	62b9      	str	r1, [r7, #40]	; 0x28
 8003d42:	415b      	adcs	r3, r3
 8003d44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d4a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003d4e:	f7fc fa97 	bl	8000280 <__aeabi_uldivmod>
 8003d52:	4602      	mov	r2, r0
 8003d54:	460b      	mov	r3, r1
 8003d56:	4b8c      	ldr	r3, [pc, #560]	; (8003f88 <UART_SetConfig+0x38c>)
 8003d58:	fba3 1302 	umull	r1, r3, r3, r2
 8003d5c:	095b      	lsrs	r3, r3, #5
 8003d5e:	2164      	movs	r1, #100	; 0x64
 8003d60:	fb01 f303 	mul.w	r3, r1, r3
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	3332      	adds	r3, #50	; 0x32
 8003d6a:	4a87      	ldr	r2, [pc, #540]	; (8003f88 <UART_SetConfig+0x38c>)
 8003d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d70:	095b      	lsrs	r3, r3, #5
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d78:	441e      	add	r6, r3
 8003d7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f04f 0100 	mov.w	r1, #0
 8003d82:	4602      	mov	r2, r0
 8003d84:	460b      	mov	r3, r1
 8003d86:	1894      	adds	r4, r2, r2
 8003d88:	623c      	str	r4, [r7, #32]
 8003d8a:	415b      	adcs	r3, r3
 8003d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d92:	1812      	adds	r2, r2, r0
 8003d94:	eb41 0303 	adc.w	r3, r1, r3
 8003d98:	f04f 0400 	mov.w	r4, #0
 8003d9c:	f04f 0500 	mov.w	r5, #0
 8003da0:	00dd      	lsls	r5, r3, #3
 8003da2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003da6:	00d4      	lsls	r4, r2, #3
 8003da8:	4622      	mov	r2, r4
 8003daa:	462b      	mov	r3, r5
 8003dac:	1814      	adds	r4, r2, r0
 8003dae:	653c      	str	r4, [r7, #80]	; 0x50
 8003db0:	414b      	adcs	r3, r1
 8003db2:	657b      	str	r3, [r7, #84]	; 0x54
 8003db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	461a      	mov	r2, r3
 8003dba:	f04f 0300 	mov.w	r3, #0
 8003dbe:	1891      	adds	r1, r2, r2
 8003dc0:	61b9      	str	r1, [r7, #24]
 8003dc2:	415b      	adcs	r3, r3
 8003dc4:	61fb      	str	r3, [r7, #28]
 8003dc6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003dce:	f7fc fa57 	bl	8000280 <__aeabi_uldivmod>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	4b6c      	ldr	r3, [pc, #432]	; (8003f88 <UART_SetConfig+0x38c>)
 8003dd8:	fba3 1302 	umull	r1, r3, r3, r2
 8003ddc:	095b      	lsrs	r3, r3, #5
 8003dde:	2164      	movs	r1, #100	; 0x64
 8003de0:	fb01 f303 	mul.w	r3, r1, r3
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	3332      	adds	r3, #50	; 0x32
 8003dea:	4a67      	ldr	r2, [pc, #412]	; (8003f88 <UART_SetConfig+0x38c>)
 8003dec:	fba2 2303 	umull	r2, r3, r2, r3
 8003df0:	095b      	lsrs	r3, r3, #5
 8003df2:	f003 0207 	and.w	r2, r3, #7
 8003df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4432      	add	r2, r6
 8003dfc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003dfe:	e0b9      	b.n	8003f74 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e02:	461c      	mov	r4, r3
 8003e04:	f04f 0500 	mov.w	r5, #0
 8003e08:	4622      	mov	r2, r4
 8003e0a:	462b      	mov	r3, r5
 8003e0c:	1891      	adds	r1, r2, r2
 8003e0e:	6139      	str	r1, [r7, #16]
 8003e10:	415b      	adcs	r3, r3
 8003e12:	617b      	str	r3, [r7, #20]
 8003e14:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e18:	1912      	adds	r2, r2, r4
 8003e1a:	eb45 0303 	adc.w	r3, r5, r3
 8003e1e:	f04f 0000 	mov.w	r0, #0
 8003e22:	f04f 0100 	mov.w	r1, #0
 8003e26:	00d9      	lsls	r1, r3, #3
 8003e28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e2c:	00d0      	lsls	r0, r2, #3
 8003e2e:	4602      	mov	r2, r0
 8003e30:	460b      	mov	r3, r1
 8003e32:	eb12 0804 	adds.w	r8, r2, r4
 8003e36:	eb43 0905 	adc.w	r9, r3, r5
 8003e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f04f 0100 	mov.w	r1, #0
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	f04f 0300 	mov.w	r3, #0
 8003e4c:	008b      	lsls	r3, r1, #2
 8003e4e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003e52:	0082      	lsls	r2, r0, #2
 8003e54:	4640      	mov	r0, r8
 8003e56:	4649      	mov	r1, r9
 8003e58:	f7fc fa12 	bl	8000280 <__aeabi_uldivmod>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	4b49      	ldr	r3, [pc, #292]	; (8003f88 <UART_SetConfig+0x38c>)
 8003e62:	fba3 2302 	umull	r2, r3, r3, r2
 8003e66:	095b      	lsrs	r3, r3, #5
 8003e68:	011e      	lsls	r6, r3, #4
 8003e6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f04f 0100 	mov.w	r1, #0
 8003e72:	4602      	mov	r2, r0
 8003e74:	460b      	mov	r3, r1
 8003e76:	1894      	adds	r4, r2, r2
 8003e78:	60bc      	str	r4, [r7, #8]
 8003e7a:	415b      	adcs	r3, r3
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e82:	1812      	adds	r2, r2, r0
 8003e84:	eb41 0303 	adc.w	r3, r1, r3
 8003e88:	f04f 0400 	mov.w	r4, #0
 8003e8c:	f04f 0500 	mov.w	r5, #0
 8003e90:	00dd      	lsls	r5, r3, #3
 8003e92:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e96:	00d4      	lsls	r4, r2, #3
 8003e98:	4622      	mov	r2, r4
 8003e9a:	462b      	mov	r3, r5
 8003e9c:	1814      	adds	r4, r2, r0
 8003e9e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003ea0:	414b      	adcs	r3, r1
 8003ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f04f 0100 	mov.w	r1, #0
 8003eae:	f04f 0200 	mov.w	r2, #0
 8003eb2:	f04f 0300 	mov.w	r3, #0
 8003eb6:	008b      	lsls	r3, r1, #2
 8003eb8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ebc:	0082      	lsls	r2, r0, #2
 8003ebe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003ec2:	f7fc f9dd 	bl	8000280 <__aeabi_uldivmod>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	460b      	mov	r3, r1
 8003eca:	4b2f      	ldr	r3, [pc, #188]	; (8003f88 <UART_SetConfig+0x38c>)
 8003ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ed0:	095b      	lsrs	r3, r3, #5
 8003ed2:	2164      	movs	r1, #100	; 0x64
 8003ed4:	fb01 f303 	mul.w	r3, r1, r3
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	011b      	lsls	r3, r3, #4
 8003edc:	3332      	adds	r3, #50	; 0x32
 8003ede:	4a2a      	ldr	r2, [pc, #168]	; (8003f88 <UART_SetConfig+0x38c>)
 8003ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee4:	095b      	lsrs	r3, r3, #5
 8003ee6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eea:	441e      	add	r6, r3
 8003eec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f04f 0100 	mov.w	r1, #0
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	1894      	adds	r4, r2, r2
 8003efa:	603c      	str	r4, [r7, #0]
 8003efc:	415b      	adcs	r3, r3
 8003efe:	607b      	str	r3, [r7, #4]
 8003f00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f04:	1812      	adds	r2, r2, r0
 8003f06:	eb41 0303 	adc.w	r3, r1, r3
 8003f0a:	f04f 0400 	mov.w	r4, #0
 8003f0e:	f04f 0500 	mov.w	r5, #0
 8003f12:	00dd      	lsls	r5, r3, #3
 8003f14:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f18:	00d4      	lsls	r4, r2, #3
 8003f1a:	4622      	mov	r2, r4
 8003f1c:	462b      	mov	r3, r5
 8003f1e:	eb12 0a00 	adds.w	sl, r2, r0
 8003f22:	eb43 0b01 	adc.w	fp, r3, r1
 8003f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f04f 0100 	mov.w	r1, #0
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	f04f 0300 	mov.w	r3, #0
 8003f38:	008b      	lsls	r3, r1, #2
 8003f3a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f3e:	0082      	lsls	r2, r0, #2
 8003f40:	4650      	mov	r0, sl
 8003f42:	4659      	mov	r1, fp
 8003f44:	f7fc f99c 	bl	8000280 <__aeabi_uldivmod>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	4b0e      	ldr	r3, [pc, #56]	; (8003f88 <UART_SetConfig+0x38c>)
 8003f4e:	fba3 1302 	umull	r1, r3, r3, r2
 8003f52:	095b      	lsrs	r3, r3, #5
 8003f54:	2164      	movs	r1, #100	; 0x64
 8003f56:	fb01 f303 	mul.w	r3, r1, r3
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	011b      	lsls	r3, r3, #4
 8003f5e:	3332      	adds	r3, #50	; 0x32
 8003f60:	4a09      	ldr	r2, [pc, #36]	; (8003f88 <UART_SetConfig+0x38c>)
 8003f62:	fba2 2303 	umull	r2, r3, r2, r3
 8003f66:	095b      	lsrs	r3, r3, #5
 8003f68:	f003 020f 	and.w	r2, r3, #15
 8003f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4432      	add	r2, r6
 8003f72:	609a      	str	r2, [r3, #8]
}
 8003f74:	bf00      	nop
 8003f76:	377c      	adds	r7, #124	; 0x7c
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f7e:	bf00      	nop
 8003f80:	40011000 	.word	0x40011000
 8003f84:	40011400 	.word	0x40011400
 8003f88:	51eb851f 	.word	0x51eb851f

08003f8c <__errno>:
 8003f8c:	4b01      	ldr	r3, [pc, #4]	; (8003f94 <__errno+0x8>)
 8003f8e:	6818      	ldr	r0, [r3, #0]
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	20000010 	.word	0x20000010

08003f98 <__libc_init_array>:
 8003f98:	b570      	push	{r4, r5, r6, lr}
 8003f9a:	4d0d      	ldr	r5, [pc, #52]	; (8003fd0 <__libc_init_array+0x38>)
 8003f9c:	4c0d      	ldr	r4, [pc, #52]	; (8003fd4 <__libc_init_array+0x3c>)
 8003f9e:	1b64      	subs	r4, r4, r5
 8003fa0:	10a4      	asrs	r4, r4, #2
 8003fa2:	2600      	movs	r6, #0
 8003fa4:	42a6      	cmp	r6, r4
 8003fa6:	d109      	bne.n	8003fbc <__libc_init_array+0x24>
 8003fa8:	4d0b      	ldr	r5, [pc, #44]	; (8003fd8 <__libc_init_array+0x40>)
 8003faa:	4c0c      	ldr	r4, [pc, #48]	; (8003fdc <__libc_init_array+0x44>)
 8003fac:	f000 ff76 	bl	8004e9c <_init>
 8003fb0:	1b64      	subs	r4, r4, r5
 8003fb2:	10a4      	asrs	r4, r4, #2
 8003fb4:	2600      	movs	r6, #0
 8003fb6:	42a6      	cmp	r6, r4
 8003fb8:	d105      	bne.n	8003fc6 <__libc_init_array+0x2e>
 8003fba:	bd70      	pop	{r4, r5, r6, pc}
 8003fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fc0:	4798      	blx	r3
 8003fc2:	3601      	adds	r6, #1
 8003fc4:	e7ee      	b.n	8003fa4 <__libc_init_array+0xc>
 8003fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fca:	4798      	blx	r3
 8003fcc:	3601      	adds	r6, #1
 8003fce:	e7f2      	b.n	8003fb6 <__libc_init_array+0x1e>
 8003fd0:	08004fbc 	.word	0x08004fbc
 8003fd4:	08004fbc 	.word	0x08004fbc
 8003fd8:	08004fbc 	.word	0x08004fbc
 8003fdc:	08004fc0 	.word	0x08004fc0

08003fe0 <memset>:
 8003fe0:	4402      	add	r2, r0
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d100      	bne.n	8003fea <memset+0xa>
 8003fe8:	4770      	bx	lr
 8003fea:	f803 1b01 	strb.w	r1, [r3], #1
 8003fee:	e7f9      	b.n	8003fe4 <memset+0x4>

08003ff0 <iprintf>:
 8003ff0:	b40f      	push	{r0, r1, r2, r3}
 8003ff2:	4b0a      	ldr	r3, [pc, #40]	; (800401c <iprintf+0x2c>)
 8003ff4:	b513      	push	{r0, r1, r4, lr}
 8003ff6:	681c      	ldr	r4, [r3, #0]
 8003ff8:	b124      	cbz	r4, 8004004 <iprintf+0x14>
 8003ffa:	69a3      	ldr	r3, [r4, #24]
 8003ffc:	b913      	cbnz	r3, 8004004 <iprintf+0x14>
 8003ffe:	4620      	mov	r0, r4
 8004000:	f000 f866 	bl	80040d0 <__sinit>
 8004004:	ab05      	add	r3, sp, #20
 8004006:	9a04      	ldr	r2, [sp, #16]
 8004008:	68a1      	ldr	r1, [r4, #8]
 800400a:	9301      	str	r3, [sp, #4]
 800400c:	4620      	mov	r0, r4
 800400e:	f000 f983 	bl	8004318 <_vfiprintf_r>
 8004012:	b002      	add	sp, #8
 8004014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004018:	b004      	add	sp, #16
 800401a:	4770      	bx	lr
 800401c:	20000010 	.word	0x20000010

08004020 <std>:
 8004020:	2300      	movs	r3, #0
 8004022:	b510      	push	{r4, lr}
 8004024:	4604      	mov	r4, r0
 8004026:	e9c0 3300 	strd	r3, r3, [r0]
 800402a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800402e:	6083      	str	r3, [r0, #8]
 8004030:	8181      	strh	r1, [r0, #12]
 8004032:	6643      	str	r3, [r0, #100]	; 0x64
 8004034:	81c2      	strh	r2, [r0, #14]
 8004036:	6183      	str	r3, [r0, #24]
 8004038:	4619      	mov	r1, r3
 800403a:	2208      	movs	r2, #8
 800403c:	305c      	adds	r0, #92	; 0x5c
 800403e:	f7ff ffcf 	bl	8003fe0 <memset>
 8004042:	4b05      	ldr	r3, [pc, #20]	; (8004058 <std+0x38>)
 8004044:	6263      	str	r3, [r4, #36]	; 0x24
 8004046:	4b05      	ldr	r3, [pc, #20]	; (800405c <std+0x3c>)
 8004048:	62a3      	str	r3, [r4, #40]	; 0x28
 800404a:	4b05      	ldr	r3, [pc, #20]	; (8004060 <std+0x40>)
 800404c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800404e:	4b05      	ldr	r3, [pc, #20]	; (8004064 <std+0x44>)
 8004050:	6224      	str	r4, [r4, #32]
 8004052:	6323      	str	r3, [r4, #48]	; 0x30
 8004054:	bd10      	pop	{r4, pc}
 8004056:	bf00      	nop
 8004058:	080048c1 	.word	0x080048c1
 800405c:	080048e3 	.word	0x080048e3
 8004060:	0800491b 	.word	0x0800491b
 8004064:	0800493f 	.word	0x0800493f

08004068 <_cleanup_r>:
 8004068:	4901      	ldr	r1, [pc, #4]	; (8004070 <_cleanup_r+0x8>)
 800406a:	f000 b8af 	b.w	80041cc <_fwalk_reent>
 800406e:	bf00      	nop
 8004070:	08004c19 	.word	0x08004c19

08004074 <__sfmoreglue>:
 8004074:	b570      	push	{r4, r5, r6, lr}
 8004076:	1e4a      	subs	r2, r1, #1
 8004078:	2568      	movs	r5, #104	; 0x68
 800407a:	4355      	muls	r5, r2
 800407c:	460e      	mov	r6, r1
 800407e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004082:	f000 f8c5 	bl	8004210 <_malloc_r>
 8004086:	4604      	mov	r4, r0
 8004088:	b140      	cbz	r0, 800409c <__sfmoreglue+0x28>
 800408a:	2100      	movs	r1, #0
 800408c:	e9c0 1600 	strd	r1, r6, [r0]
 8004090:	300c      	adds	r0, #12
 8004092:	60a0      	str	r0, [r4, #8]
 8004094:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004098:	f7ff ffa2 	bl	8003fe0 <memset>
 800409c:	4620      	mov	r0, r4
 800409e:	bd70      	pop	{r4, r5, r6, pc}

080040a0 <__sfp_lock_acquire>:
 80040a0:	4801      	ldr	r0, [pc, #4]	; (80040a8 <__sfp_lock_acquire+0x8>)
 80040a2:	f000 b8b3 	b.w	800420c <__retarget_lock_acquire_recursive>
 80040a6:	bf00      	nop
 80040a8:	2000023c 	.word	0x2000023c

080040ac <__sfp_lock_release>:
 80040ac:	4801      	ldr	r0, [pc, #4]	; (80040b4 <__sfp_lock_release+0x8>)
 80040ae:	f000 b8ae 	b.w	800420e <__retarget_lock_release_recursive>
 80040b2:	bf00      	nop
 80040b4:	2000023c 	.word	0x2000023c

080040b8 <__sinit_lock_acquire>:
 80040b8:	4801      	ldr	r0, [pc, #4]	; (80040c0 <__sinit_lock_acquire+0x8>)
 80040ba:	f000 b8a7 	b.w	800420c <__retarget_lock_acquire_recursive>
 80040be:	bf00      	nop
 80040c0:	20000237 	.word	0x20000237

080040c4 <__sinit_lock_release>:
 80040c4:	4801      	ldr	r0, [pc, #4]	; (80040cc <__sinit_lock_release+0x8>)
 80040c6:	f000 b8a2 	b.w	800420e <__retarget_lock_release_recursive>
 80040ca:	bf00      	nop
 80040cc:	20000237 	.word	0x20000237

080040d0 <__sinit>:
 80040d0:	b510      	push	{r4, lr}
 80040d2:	4604      	mov	r4, r0
 80040d4:	f7ff fff0 	bl	80040b8 <__sinit_lock_acquire>
 80040d8:	69a3      	ldr	r3, [r4, #24]
 80040da:	b11b      	cbz	r3, 80040e4 <__sinit+0x14>
 80040dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040e0:	f7ff bff0 	b.w	80040c4 <__sinit_lock_release>
 80040e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80040e8:	6523      	str	r3, [r4, #80]	; 0x50
 80040ea:	4b13      	ldr	r3, [pc, #76]	; (8004138 <__sinit+0x68>)
 80040ec:	4a13      	ldr	r2, [pc, #76]	; (800413c <__sinit+0x6c>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80040f2:	42a3      	cmp	r3, r4
 80040f4:	bf04      	itt	eq
 80040f6:	2301      	moveq	r3, #1
 80040f8:	61a3      	streq	r3, [r4, #24]
 80040fa:	4620      	mov	r0, r4
 80040fc:	f000 f820 	bl	8004140 <__sfp>
 8004100:	6060      	str	r0, [r4, #4]
 8004102:	4620      	mov	r0, r4
 8004104:	f000 f81c 	bl	8004140 <__sfp>
 8004108:	60a0      	str	r0, [r4, #8]
 800410a:	4620      	mov	r0, r4
 800410c:	f000 f818 	bl	8004140 <__sfp>
 8004110:	2200      	movs	r2, #0
 8004112:	60e0      	str	r0, [r4, #12]
 8004114:	2104      	movs	r1, #4
 8004116:	6860      	ldr	r0, [r4, #4]
 8004118:	f7ff ff82 	bl	8004020 <std>
 800411c:	68a0      	ldr	r0, [r4, #8]
 800411e:	2201      	movs	r2, #1
 8004120:	2109      	movs	r1, #9
 8004122:	f7ff ff7d 	bl	8004020 <std>
 8004126:	68e0      	ldr	r0, [r4, #12]
 8004128:	2202      	movs	r2, #2
 800412a:	2112      	movs	r1, #18
 800412c:	f7ff ff78 	bl	8004020 <std>
 8004130:	2301      	movs	r3, #1
 8004132:	61a3      	str	r3, [r4, #24]
 8004134:	e7d2      	b.n	80040dc <__sinit+0xc>
 8004136:	bf00      	nop
 8004138:	08004f1c 	.word	0x08004f1c
 800413c:	08004069 	.word	0x08004069

08004140 <__sfp>:
 8004140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004142:	4607      	mov	r7, r0
 8004144:	f7ff ffac 	bl	80040a0 <__sfp_lock_acquire>
 8004148:	4b1e      	ldr	r3, [pc, #120]	; (80041c4 <__sfp+0x84>)
 800414a:	681e      	ldr	r6, [r3, #0]
 800414c:	69b3      	ldr	r3, [r6, #24]
 800414e:	b913      	cbnz	r3, 8004156 <__sfp+0x16>
 8004150:	4630      	mov	r0, r6
 8004152:	f7ff ffbd 	bl	80040d0 <__sinit>
 8004156:	3648      	adds	r6, #72	; 0x48
 8004158:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800415c:	3b01      	subs	r3, #1
 800415e:	d503      	bpl.n	8004168 <__sfp+0x28>
 8004160:	6833      	ldr	r3, [r6, #0]
 8004162:	b30b      	cbz	r3, 80041a8 <__sfp+0x68>
 8004164:	6836      	ldr	r6, [r6, #0]
 8004166:	e7f7      	b.n	8004158 <__sfp+0x18>
 8004168:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800416c:	b9d5      	cbnz	r5, 80041a4 <__sfp+0x64>
 800416e:	4b16      	ldr	r3, [pc, #88]	; (80041c8 <__sfp+0x88>)
 8004170:	60e3      	str	r3, [r4, #12]
 8004172:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004176:	6665      	str	r5, [r4, #100]	; 0x64
 8004178:	f000 f847 	bl	800420a <__retarget_lock_init_recursive>
 800417c:	f7ff ff96 	bl	80040ac <__sfp_lock_release>
 8004180:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004184:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004188:	6025      	str	r5, [r4, #0]
 800418a:	61a5      	str	r5, [r4, #24]
 800418c:	2208      	movs	r2, #8
 800418e:	4629      	mov	r1, r5
 8004190:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004194:	f7ff ff24 	bl	8003fe0 <memset>
 8004198:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800419c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80041a0:	4620      	mov	r0, r4
 80041a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041a4:	3468      	adds	r4, #104	; 0x68
 80041a6:	e7d9      	b.n	800415c <__sfp+0x1c>
 80041a8:	2104      	movs	r1, #4
 80041aa:	4638      	mov	r0, r7
 80041ac:	f7ff ff62 	bl	8004074 <__sfmoreglue>
 80041b0:	4604      	mov	r4, r0
 80041b2:	6030      	str	r0, [r6, #0]
 80041b4:	2800      	cmp	r0, #0
 80041b6:	d1d5      	bne.n	8004164 <__sfp+0x24>
 80041b8:	f7ff ff78 	bl	80040ac <__sfp_lock_release>
 80041bc:	230c      	movs	r3, #12
 80041be:	603b      	str	r3, [r7, #0]
 80041c0:	e7ee      	b.n	80041a0 <__sfp+0x60>
 80041c2:	bf00      	nop
 80041c4:	08004f1c 	.word	0x08004f1c
 80041c8:	ffff0001 	.word	0xffff0001

080041cc <_fwalk_reent>:
 80041cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041d0:	4606      	mov	r6, r0
 80041d2:	4688      	mov	r8, r1
 80041d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80041d8:	2700      	movs	r7, #0
 80041da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80041de:	f1b9 0901 	subs.w	r9, r9, #1
 80041e2:	d505      	bpl.n	80041f0 <_fwalk_reent+0x24>
 80041e4:	6824      	ldr	r4, [r4, #0]
 80041e6:	2c00      	cmp	r4, #0
 80041e8:	d1f7      	bne.n	80041da <_fwalk_reent+0xe>
 80041ea:	4638      	mov	r0, r7
 80041ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041f0:	89ab      	ldrh	r3, [r5, #12]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d907      	bls.n	8004206 <_fwalk_reent+0x3a>
 80041f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80041fa:	3301      	adds	r3, #1
 80041fc:	d003      	beq.n	8004206 <_fwalk_reent+0x3a>
 80041fe:	4629      	mov	r1, r5
 8004200:	4630      	mov	r0, r6
 8004202:	47c0      	blx	r8
 8004204:	4307      	orrs	r7, r0
 8004206:	3568      	adds	r5, #104	; 0x68
 8004208:	e7e9      	b.n	80041de <_fwalk_reent+0x12>

0800420a <__retarget_lock_init_recursive>:
 800420a:	4770      	bx	lr

0800420c <__retarget_lock_acquire_recursive>:
 800420c:	4770      	bx	lr

0800420e <__retarget_lock_release_recursive>:
 800420e:	4770      	bx	lr

08004210 <_malloc_r>:
 8004210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004212:	1ccd      	adds	r5, r1, #3
 8004214:	f025 0503 	bic.w	r5, r5, #3
 8004218:	3508      	adds	r5, #8
 800421a:	2d0c      	cmp	r5, #12
 800421c:	bf38      	it	cc
 800421e:	250c      	movcc	r5, #12
 8004220:	2d00      	cmp	r5, #0
 8004222:	4606      	mov	r6, r0
 8004224:	db01      	blt.n	800422a <_malloc_r+0x1a>
 8004226:	42a9      	cmp	r1, r5
 8004228:	d903      	bls.n	8004232 <_malloc_r+0x22>
 800422a:	230c      	movs	r3, #12
 800422c:	6033      	str	r3, [r6, #0]
 800422e:	2000      	movs	r0, #0
 8004230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004232:	f000 fda3 	bl	8004d7c <__malloc_lock>
 8004236:	4921      	ldr	r1, [pc, #132]	; (80042bc <_malloc_r+0xac>)
 8004238:	680a      	ldr	r2, [r1, #0]
 800423a:	4614      	mov	r4, r2
 800423c:	b99c      	cbnz	r4, 8004266 <_malloc_r+0x56>
 800423e:	4f20      	ldr	r7, [pc, #128]	; (80042c0 <_malloc_r+0xb0>)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	b923      	cbnz	r3, 800424e <_malloc_r+0x3e>
 8004244:	4621      	mov	r1, r4
 8004246:	4630      	mov	r0, r6
 8004248:	f000 fb2a 	bl	80048a0 <_sbrk_r>
 800424c:	6038      	str	r0, [r7, #0]
 800424e:	4629      	mov	r1, r5
 8004250:	4630      	mov	r0, r6
 8004252:	f000 fb25 	bl	80048a0 <_sbrk_r>
 8004256:	1c43      	adds	r3, r0, #1
 8004258:	d123      	bne.n	80042a2 <_malloc_r+0x92>
 800425a:	230c      	movs	r3, #12
 800425c:	6033      	str	r3, [r6, #0]
 800425e:	4630      	mov	r0, r6
 8004260:	f000 fd92 	bl	8004d88 <__malloc_unlock>
 8004264:	e7e3      	b.n	800422e <_malloc_r+0x1e>
 8004266:	6823      	ldr	r3, [r4, #0]
 8004268:	1b5b      	subs	r3, r3, r5
 800426a:	d417      	bmi.n	800429c <_malloc_r+0x8c>
 800426c:	2b0b      	cmp	r3, #11
 800426e:	d903      	bls.n	8004278 <_malloc_r+0x68>
 8004270:	6023      	str	r3, [r4, #0]
 8004272:	441c      	add	r4, r3
 8004274:	6025      	str	r5, [r4, #0]
 8004276:	e004      	b.n	8004282 <_malloc_r+0x72>
 8004278:	6863      	ldr	r3, [r4, #4]
 800427a:	42a2      	cmp	r2, r4
 800427c:	bf0c      	ite	eq
 800427e:	600b      	streq	r3, [r1, #0]
 8004280:	6053      	strne	r3, [r2, #4]
 8004282:	4630      	mov	r0, r6
 8004284:	f000 fd80 	bl	8004d88 <__malloc_unlock>
 8004288:	f104 000b 	add.w	r0, r4, #11
 800428c:	1d23      	adds	r3, r4, #4
 800428e:	f020 0007 	bic.w	r0, r0, #7
 8004292:	1ac2      	subs	r2, r0, r3
 8004294:	d0cc      	beq.n	8004230 <_malloc_r+0x20>
 8004296:	1a1b      	subs	r3, r3, r0
 8004298:	50a3      	str	r3, [r4, r2]
 800429a:	e7c9      	b.n	8004230 <_malloc_r+0x20>
 800429c:	4622      	mov	r2, r4
 800429e:	6864      	ldr	r4, [r4, #4]
 80042a0:	e7cc      	b.n	800423c <_malloc_r+0x2c>
 80042a2:	1cc4      	adds	r4, r0, #3
 80042a4:	f024 0403 	bic.w	r4, r4, #3
 80042a8:	42a0      	cmp	r0, r4
 80042aa:	d0e3      	beq.n	8004274 <_malloc_r+0x64>
 80042ac:	1a21      	subs	r1, r4, r0
 80042ae:	4630      	mov	r0, r6
 80042b0:	f000 faf6 	bl	80048a0 <_sbrk_r>
 80042b4:	3001      	adds	r0, #1
 80042b6:	d1dd      	bne.n	8004274 <_malloc_r+0x64>
 80042b8:	e7cf      	b.n	800425a <_malloc_r+0x4a>
 80042ba:	bf00      	nop
 80042bc:	2000009c 	.word	0x2000009c
 80042c0:	200000a0 	.word	0x200000a0

080042c4 <__sfputc_r>:
 80042c4:	6893      	ldr	r3, [r2, #8]
 80042c6:	3b01      	subs	r3, #1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	b410      	push	{r4}
 80042cc:	6093      	str	r3, [r2, #8]
 80042ce:	da08      	bge.n	80042e2 <__sfputc_r+0x1e>
 80042d0:	6994      	ldr	r4, [r2, #24]
 80042d2:	42a3      	cmp	r3, r4
 80042d4:	db01      	blt.n	80042da <__sfputc_r+0x16>
 80042d6:	290a      	cmp	r1, #10
 80042d8:	d103      	bne.n	80042e2 <__sfputc_r+0x1e>
 80042da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042de:	f000 bb33 	b.w	8004948 <__swbuf_r>
 80042e2:	6813      	ldr	r3, [r2, #0]
 80042e4:	1c58      	adds	r0, r3, #1
 80042e6:	6010      	str	r0, [r2, #0]
 80042e8:	7019      	strb	r1, [r3, #0]
 80042ea:	4608      	mov	r0, r1
 80042ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <__sfputs_r>:
 80042f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f4:	4606      	mov	r6, r0
 80042f6:	460f      	mov	r7, r1
 80042f8:	4614      	mov	r4, r2
 80042fa:	18d5      	adds	r5, r2, r3
 80042fc:	42ac      	cmp	r4, r5
 80042fe:	d101      	bne.n	8004304 <__sfputs_r+0x12>
 8004300:	2000      	movs	r0, #0
 8004302:	e007      	b.n	8004314 <__sfputs_r+0x22>
 8004304:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004308:	463a      	mov	r2, r7
 800430a:	4630      	mov	r0, r6
 800430c:	f7ff ffda 	bl	80042c4 <__sfputc_r>
 8004310:	1c43      	adds	r3, r0, #1
 8004312:	d1f3      	bne.n	80042fc <__sfputs_r+0xa>
 8004314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004318 <_vfiprintf_r>:
 8004318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800431c:	460d      	mov	r5, r1
 800431e:	b09d      	sub	sp, #116	; 0x74
 8004320:	4614      	mov	r4, r2
 8004322:	4698      	mov	r8, r3
 8004324:	4606      	mov	r6, r0
 8004326:	b118      	cbz	r0, 8004330 <_vfiprintf_r+0x18>
 8004328:	6983      	ldr	r3, [r0, #24]
 800432a:	b90b      	cbnz	r3, 8004330 <_vfiprintf_r+0x18>
 800432c:	f7ff fed0 	bl	80040d0 <__sinit>
 8004330:	4b89      	ldr	r3, [pc, #548]	; (8004558 <_vfiprintf_r+0x240>)
 8004332:	429d      	cmp	r5, r3
 8004334:	d11b      	bne.n	800436e <_vfiprintf_r+0x56>
 8004336:	6875      	ldr	r5, [r6, #4]
 8004338:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800433a:	07d9      	lsls	r1, r3, #31
 800433c:	d405      	bmi.n	800434a <_vfiprintf_r+0x32>
 800433e:	89ab      	ldrh	r3, [r5, #12]
 8004340:	059a      	lsls	r2, r3, #22
 8004342:	d402      	bmi.n	800434a <_vfiprintf_r+0x32>
 8004344:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004346:	f7ff ff61 	bl	800420c <__retarget_lock_acquire_recursive>
 800434a:	89ab      	ldrh	r3, [r5, #12]
 800434c:	071b      	lsls	r3, r3, #28
 800434e:	d501      	bpl.n	8004354 <_vfiprintf_r+0x3c>
 8004350:	692b      	ldr	r3, [r5, #16]
 8004352:	b9eb      	cbnz	r3, 8004390 <_vfiprintf_r+0x78>
 8004354:	4629      	mov	r1, r5
 8004356:	4630      	mov	r0, r6
 8004358:	f000 fb5a 	bl	8004a10 <__swsetup_r>
 800435c:	b1c0      	cbz	r0, 8004390 <_vfiprintf_r+0x78>
 800435e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004360:	07dc      	lsls	r4, r3, #31
 8004362:	d50e      	bpl.n	8004382 <_vfiprintf_r+0x6a>
 8004364:	f04f 30ff 	mov.w	r0, #4294967295
 8004368:	b01d      	add	sp, #116	; 0x74
 800436a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800436e:	4b7b      	ldr	r3, [pc, #492]	; (800455c <_vfiprintf_r+0x244>)
 8004370:	429d      	cmp	r5, r3
 8004372:	d101      	bne.n	8004378 <_vfiprintf_r+0x60>
 8004374:	68b5      	ldr	r5, [r6, #8]
 8004376:	e7df      	b.n	8004338 <_vfiprintf_r+0x20>
 8004378:	4b79      	ldr	r3, [pc, #484]	; (8004560 <_vfiprintf_r+0x248>)
 800437a:	429d      	cmp	r5, r3
 800437c:	bf08      	it	eq
 800437e:	68f5      	ldreq	r5, [r6, #12]
 8004380:	e7da      	b.n	8004338 <_vfiprintf_r+0x20>
 8004382:	89ab      	ldrh	r3, [r5, #12]
 8004384:	0598      	lsls	r0, r3, #22
 8004386:	d4ed      	bmi.n	8004364 <_vfiprintf_r+0x4c>
 8004388:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800438a:	f7ff ff40 	bl	800420e <__retarget_lock_release_recursive>
 800438e:	e7e9      	b.n	8004364 <_vfiprintf_r+0x4c>
 8004390:	2300      	movs	r3, #0
 8004392:	9309      	str	r3, [sp, #36]	; 0x24
 8004394:	2320      	movs	r3, #32
 8004396:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800439a:	f8cd 800c 	str.w	r8, [sp, #12]
 800439e:	2330      	movs	r3, #48	; 0x30
 80043a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004564 <_vfiprintf_r+0x24c>
 80043a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043a8:	f04f 0901 	mov.w	r9, #1
 80043ac:	4623      	mov	r3, r4
 80043ae:	469a      	mov	sl, r3
 80043b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043b4:	b10a      	cbz	r2, 80043ba <_vfiprintf_r+0xa2>
 80043b6:	2a25      	cmp	r2, #37	; 0x25
 80043b8:	d1f9      	bne.n	80043ae <_vfiprintf_r+0x96>
 80043ba:	ebba 0b04 	subs.w	fp, sl, r4
 80043be:	d00b      	beq.n	80043d8 <_vfiprintf_r+0xc0>
 80043c0:	465b      	mov	r3, fp
 80043c2:	4622      	mov	r2, r4
 80043c4:	4629      	mov	r1, r5
 80043c6:	4630      	mov	r0, r6
 80043c8:	f7ff ff93 	bl	80042f2 <__sfputs_r>
 80043cc:	3001      	adds	r0, #1
 80043ce:	f000 80aa 	beq.w	8004526 <_vfiprintf_r+0x20e>
 80043d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043d4:	445a      	add	r2, fp
 80043d6:	9209      	str	r2, [sp, #36]	; 0x24
 80043d8:	f89a 3000 	ldrb.w	r3, [sl]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 80a2 	beq.w	8004526 <_vfiprintf_r+0x20e>
 80043e2:	2300      	movs	r3, #0
 80043e4:	f04f 32ff 	mov.w	r2, #4294967295
 80043e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043ec:	f10a 0a01 	add.w	sl, sl, #1
 80043f0:	9304      	str	r3, [sp, #16]
 80043f2:	9307      	str	r3, [sp, #28]
 80043f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043f8:	931a      	str	r3, [sp, #104]	; 0x68
 80043fa:	4654      	mov	r4, sl
 80043fc:	2205      	movs	r2, #5
 80043fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004402:	4858      	ldr	r0, [pc, #352]	; (8004564 <_vfiprintf_r+0x24c>)
 8004404:	f7fb feec 	bl	80001e0 <memchr>
 8004408:	9a04      	ldr	r2, [sp, #16]
 800440a:	b9d8      	cbnz	r0, 8004444 <_vfiprintf_r+0x12c>
 800440c:	06d1      	lsls	r1, r2, #27
 800440e:	bf44      	itt	mi
 8004410:	2320      	movmi	r3, #32
 8004412:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004416:	0713      	lsls	r3, r2, #28
 8004418:	bf44      	itt	mi
 800441a:	232b      	movmi	r3, #43	; 0x2b
 800441c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004420:	f89a 3000 	ldrb.w	r3, [sl]
 8004424:	2b2a      	cmp	r3, #42	; 0x2a
 8004426:	d015      	beq.n	8004454 <_vfiprintf_r+0x13c>
 8004428:	9a07      	ldr	r2, [sp, #28]
 800442a:	4654      	mov	r4, sl
 800442c:	2000      	movs	r0, #0
 800442e:	f04f 0c0a 	mov.w	ip, #10
 8004432:	4621      	mov	r1, r4
 8004434:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004438:	3b30      	subs	r3, #48	; 0x30
 800443a:	2b09      	cmp	r3, #9
 800443c:	d94e      	bls.n	80044dc <_vfiprintf_r+0x1c4>
 800443e:	b1b0      	cbz	r0, 800446e <_vfiprintf_r+0x156>
 8004440:	9207      	str	r2, [sp, #28]
 8004442:	e014      	b.n	800446e <_vfiprintf_r+0x156>
 8004444:	eba0 0308 	sub.w	r3, r0, r8
 8004448:	fa09 f303 	lsl.w	r3, r9, r3
 800444c:	4313      	orrs	r3, r2
 800444e:	9304      	str	r3, [sp, #16]
 8004450:	46a2      	mov	sl, r4
 8004452:	e7d2      	b.n	80043fa <_vfiprintf_r+0xe2>
 8004454:	9b03      	ldr	r3, [sp, #12]
 8004456:	1d19      	adds	r1, r3, #4
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	9103      	str	r1, [sp, #12]
 800445c:	2b00      	cmp	r3, #0
 800445e:	bfbb      	ittet	lt
 8004460:	425b      	neglt	r3, r3
 8004462:	f042 0202 	orrlt.w	r2, r2, #2
 8004466:	9307      	strge	r3, [sp, #28]
 8004468:	9307      	strlt	r3, [sp, #28]
 800446a:	bfb8      	it	lt
 800446c:	9204      	strlt	r2, [sp, #16]
 800446e:	7823      	ldrb	r3, [r4, #0]
 8004470:	2b2e      	cmp	r3, #46	; 0x2e
 8004472:	d10c      	bne.n	800448e <_vfiprintf_r+0x176>
 8004474:	7863      	ldrb	r3, [r4, #1]
 8004476:	2b2a      	cmp	r3, #42	; 0x2a
 8004478:	d135      	bne.n	80044e6 <_vfiprintf_r+0x1ce>
 800447a:	9b03      	ldr	r3, [sp, #12]
 800447c:	1d1a      	adds	r2, r3, #4
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	9203      	str	r2, [sp, #12]
 8004482:	2b00      	cmp	r3, #0
 8004484:	bfb8      	it	lt
 8004486:	f04f 33ff 	movlt.w	r3, #4294967295
 800448a:	3402      	adds	r4, #2
 800448c:	9305      	str	r3, [sp, #20]
 800448e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004574 <_vfiprintf_r+0x25c>
 8004492:	7821      	ldrb	r1, [r4, #0]
 8004494:	2203      	movs	r2, #3
 8004496:	4650      	mov	r0, sl
 8004498:	f7fb fea2 	bl	80001e0 <memchr>
 800449c:	b140      	cbz	r0, 80044b0 <_vfiprintf_r+0x198>
 800449e:	2340      	movs	r3, #64	; 0x40
 80044a0:	eba0 000a 	sub.w	r0, r0, sl
 80044a4:	fa03 f000 	lsl.w	r0, r3, r0
 80044a8:	9b04      	ldr	r3, [sp, #16]
 80044aa:	4303      	orrs	r3, r0
 80044ac:	3401      	adds	r4, #1
 80044ae:	9304      	str	r3, [sp, #16]
 80044b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044b4:	482c      	ldr	r0, [pc, #176]	; (8004568 <_vfiprintf_r+0x250>)
 80044b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044ba:	2206      	movs	r2, #6
 80044bc:	f7fb fe90 	bl	80001e0 <memchr>
 80044c0:	2800      	cmp	r0, #0
 80044c2:	d03f      	beq.n	8004544 <_vfiprintf_r+0x22c>
 80044c4:	4b29      	ldr	r3, [pc, #164]	; (800456c <_vfiprintf_r+0x254>)
 80044c6:	bb1b      	cbnz	r3, 8004510 <_vfiprintf_r+0x1f8>
 80044c8:	9b03      	ldr	r3, [sp, #12]
 80044ca:	3307      	adds	r3, #7
 80044cc:	f023 0307 	bic.w	r3, r3, #7
 80044d0:	3308      	adds	r3, #8
 80044d2:	9303      	str	r3, [sp, #12]
 80044d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044d6:	443b      	add	r3, r7
 80044d8:	9309      	str	r3, [sp, #36]	; 0x24
 80044da:	e767      	b.n	80043ac <_vfiprintf_r+0x94>
 80044dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80044e0:	460c      	mov	r4, r1
 80044e2:	2001      	movs	r0, #1
 80044e4:	e7a5      	b.n	8004432 <_vfiprintf_r+0x11a>
 80044e6:	2300      	movs	r3, #0
 80044e8:	3401      	adds	r4, #1
 80044ea:	9305      	str	r3, [sp, #20]
 80044ec:	4619      	mov	r1, r3
 80044ee:	f04f 0c0a 	mov.w	ip, #10
 80044f2:	4620      	mov	r0, r4
 80044f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044f8:	3a30      	subs	r2, #48	; 0x30
 80044fa:	2a09      	cmp	r2, #9
 80044fc:	d903      	bls.n	8004506 <_vfiprintf_r+0x1ee>
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d0c5      	beq.n	800448e <_vfiprintf_r+0x176>
 8004502:	9105      	str	r1, [sp, #20]
 8004504:	e7c3      	b.n	800448e <_vfiprintf_r+0x176>
 8004506:	fb0c 2101 	mla	r1, ip, r1, r2
 800450a:	4604      	mov	r4, r0
 800450c:	2301      	movs	r3, #1
 800450e:	e7f0      	b.n	80044f2 <_vfiprintf_r+0x1da>
 8004510:	ab03      	add	r3, sp, #12
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	462a      	mov	r2, r5
 8004516:	4b16      	ldr	r3, [pc, #88]	; (8004570 <_vfiprintf_r+0x258>)
 8004518:	a904      	add	r1, sp, #16
 800451a:	4630      	mov	r0, r6
 800451c:	f3af 8000 	nop.w
 8004520:	4607      	mov	r7, r0
 8004522:	1c78      	adds	r0, r7, #1
 8004524:	d1d6      	bne.n	80044d4 <_vfiprintf_r+0x1bc>
 8004526:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004528:	07d9      	lsls	r1, r3, #31
 800452a:	d405      	bmi.n	8004538 <_vfiprintf_r+0x220>
 800452c:	89ab      	ldrh	r3, [r5, #12]
 800452e:	059a      	lsls	r2, r3, #22
 8004530:	d402      	bmi.n	8004538 <_vfiprintf_r+0x220>
 8004532:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004534:	f7ff fe6b 	bl	800420e <__retarget_lock_release_recursive>
 8004538:	89ab      	ldrh	r3, [r5, #12]
 800453a:	065b      	lsls	r3, r3, #25
 800453c:	f53f af12 	bmi.w	8004364 <_vfiprintf_r+0x4c>
 8004540:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004542:	e711      	b.n	8004368 <_vfiprintf_r+0x50>
 8004544:	ab03      	add	r3, sp, #12
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	462a      	mov	r2, r5
 800454a:	4b09      	ldr	r3, [pc, #36]	; (8004570 <_vfiprintf_r+0x258>)
 800454c:	a904      	add	r1, sp, #16
 800454e:	4630      	mov	r0, r6
 8004550:	f000 f880 	bl	8004654 <_printf_i>
 8004554:	e7e4      	b.n	8004520 <_vfiprintf_r+0x208>
 8004556:	bf00      	nop
 8004558:	08004f40 	.word	0x08004f40
 800455c:	08004f60 	.word	0x08004f60
 8004560:	08004f20 	.word	0x08004f20
 8004564:	08004f80 	.word	0x08004f80
 8004568:	08004f8a 	.word	0x08004f8a
 800456c:	00000000 	.word	0x00000000
 8004570:	080042f3 	.word	0x080042f3
 8004574:	08004f86 	.word	0x08004f86

08004578 <_printf_common>:
 8004578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800457c:	4616      	mov	r6, r2
 800457e:	4699      	mov	r9, r3
 8004580:	688a      	ldr	r2, [r1, #8]
 8004582:	690b      	ldr	r3, [r1, #16]
 8004584:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004588:	4293      	cmp	r3, r2
 800458a:	bfb8      	it	lt
 800458c:	4613      	movlt	r3, r2
 800458e:	6033      	str	r3, [r6, #0]
 8004590:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004594:	4607      	mov	r7, r0
 8004596:	460c      	mov	r4, r1
 8004598:	b10a      	cbz	r2, 800459e <_printf_common+0x26>
 800459a:	3301      	adds	r3, #1
 800459c:	6033      	str	r3, [r6, #0]
 800459e:	6823      	ldr	r3, [r4, #0]
 80045a0:	0699      	lsls	r1, r3, #26
 80045a2:	bf42      	ittt	mi
 80045a4:	6833      	ldrmi	r3, [r6, #0]
 80045a6:	3302      	addmi	r3, #2
 80045a8:	6033      	strmi	r3, [r6, #0]
 80045aa:	6825      	ldr	r5, [r4, #0]
 80045ac:	f015 0506 	ands.w	r5, r5, #6
 80045b0:	d106      	bne.n	80045c0 <_printf_common+0x48>
 80045b2:	f104 0a19 	add.w	sl, r4, #25
 80045b6:	68e3      	ldr	r3, [r4, #12]
 80045b8:	6832      	ldr	r2, [r6, #0]
 80045ba:	1a9b      	subs	r3, r3, r2
 80045bc:	42ab      	cmp	r3, r5
 80045be:	dc26      	bgt.n	800460e <_printf_common+0x96>
 80045c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045c4:	1e13      	subs	r3, r2, #0
 80045c6:	6822      	ldr	r2, [r4, #0]
 80045c8:	bf18      	it	ne
 80045ca:	2301      	movne	r3, #1
 80045cc:	0692      	lsls	r2, r2, #26
 80045ce:	d42b      	bmi.n	8004628 <_printf_common+0xb0>
 80045d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045d4:	4649      	mov	r1, r9
 80045d6:	4638      	mov	r0, r7
 80045d8:	47c0      	blx	r8
 80045da:	3001      	adds	r0, #1
 80045dc:	d01e      	beq.n	800461c <_printf_common+0xa4>
 80045de:	6823      	ldr	r3, [r4, #0]
 80045e0:	68e5      	ldr	r5, [r4, #12]
 80045e2:	6832      	ldr	r2, [r6, #0]
 80045e4:	f003 0306 	and.w	r3, r3, #6
 80045e8:	2b04      	cmp	r3, #4
 80045ea:	bf08      	it	eq
 80045ec:	1aad      	subeq	r5, r5, r2
 80045ee:	68a3      	ldr	r3, [r4, #8]
 80045f0:	6922      	ldr	r2, [r4, #16]
 80045f2:	bf0c      	ite	eq
 80045f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045f8:	2500      	movne	r5, #0
 80045fa:	4293      	cmp	r3, r2
 80045fc:	bfc4      	itt	gt
 80045fe:	1a9b      	subgt	r3, r3, r2
 8004600:	18ed      	addgt	r5, r5, r3
 8004602:	2600      	movs	r6, #0
 8004604:	341a      	adds	r4, #26
 8004606:	42b5      	cmp	r5, r6
 8004608:	d11a      	bne.n	8004640 <_printf_common+0xc8>
 800460a:	2000      	movs	r0, #0
 800460c:	e008      	b.n	8004620 <_printf_common+0xa8>
 800460e:	2301      	movs	r3, #1
 8004610:	4652      	mov	r2, sl
 8004612:	4649      	mov	r1, r9
 8004614:	4638      	mov	r0, r7
 8004616:	47c0      	blx	r8
 8004618:	3001      	adds	r0, #1
 800461a:	d103      	bne.n	8004624 <_printf_common+0xac>
 800461c:	f04f 30ff 	mov.w	r0, #4294967295
 8004620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004624:	3501      	adds	r5, #1
 8004626:	e7c6      	b.n	80045b6 <_printf_common+0x3e>
 8004628:	18e1      	adds	r1, r4, r3
 800462a:	1c5a      	adds	r2, r3, #1
 800462c:	2030      	movs	r0, #48	; 0x30
 800462e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004632:	4422      	add	r2, r4
 8004634:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004638:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800463c:	3302      	adds	r3, #2
 800463e:	e7c7      	b.n	80045d0 <_printf_common+0x58>
 8004640:	2301      	movs	r3, #1
 8004642:	4622      	mov	r2, r4
 8004644:	4649      	mov	r1, r9
 8004646:	4638      	mov	r0, r7
 8004648:	47c0      	blx	r8
 800464a:	3001      	adds	r0, #1
 800464c:	d0e6      	beq.n	800461c <_printf_common+0xa4>
 800464e:	3601      	adds	r6, #1
 8004650:	e7d9      	b.n	8004606 <_printf_common+0x8e>
	...

08004654 <_printf_i>:
 8004654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004658:	460c      	mov	r4, r1
 800465a:	4691      	mov	r9, r2
 800465c:	7e27      	ldrb	r7, [r4, #24]
 800465e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004660:	2f78      	cmp	r7, #120	; 0x78
 8004662:	4680      	mov	r8, r0
 8004664:	469a      	mov	sl, r3
 8004666:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800466a:	d807      	bhi.n	800467c <_printf_i+0x28>
 800466c:	2f62      	cmp	r7, #98	; 0x62
 800466e:	d80a      	bhi.n	8004686 <_printf_i+0x32>
 8004670:	2f00      	cmp	r7, #0
 8004672:	f000 80d8 	beq.w	8004826 <_printf_i+0x1d2>
 8004676:	2f58      	cmp	r7, #88	; 0x58
 8004678:	f000 80a3 	beq.w	80047c2 <_printf_i+0x16e>
 800467c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004680:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004684:	e03a      	b.n	80046fc <_printf_i+0xa8>
 8004686:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800468a:	2b15      	cmp	r3, #21
 800468c:	d8f6      	bhi.n	800467c <_printf_i+0x28>
 800468e:	a001      	add	r0, pc, #4	; (adr r0, 8004694 <_printf_i+0x40>)
 8004690:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004694:	080046ed 	.word	0x080046ed
 8004698:	08004701 	.word	0x08004701
 800469c:	0800467d 	.word	0x0800467d
 80046a0:	0800467d 	.word	0x0800467d
 80046a4:	0800467d 	.word	0x0800467d
 80046a8:	0800467d 	.word	0x0800467d
 80046ac:	08004701 	.word	0x08004701
 80046b0:	0800467d 	.word	0x0800467d
 80046b4:	0800467d 	.word	0x0800467d
 80046b8:	0800467d 	.word	0x0800467d
 80046bc:	0800467d 	.word	0x0800467d
 80046c0:	0800480d 	.word	0x0800480d
 80046c4:	08004731 	.word	0x08004731
 80046c8:	080047ef 	.word	0x080047ef
 80046cc:	0800467d 	.word	0x0800467d
 80046d0:	0800467d 	.word	0x0800467d
 80046d4:	0800482f 	.word	0x0800482f
 80046d8:	0800467d 	.word	0x0800467d
 80046dc:	08004731 	.word	0x08004731
 80046e0:	0800467d 	.word	0x0800467d
 80046e4:	0800467d 	.word	0x0800467d
 80046e8:	080047f7 	.word	0x080047f7
 80046ec:	680b      	ldr	r3, [r1, #0]
 80046ee:	1d1a      	adds	r2, r3, #4
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	600a      	str	r2, [r1, #0]
 80046f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80046f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046fc:	2301      	movs	r3, #1
 80046fe:	e0a3      	b.n	8004848 <_printf_i+0x1f4>
 8004700:	6825      	ldr	r5, [r4, #0]
 8004702:	6808      	ldr	r0, [r1, #0]
 8004704:	062e      	lsls	r6, r5, #24
 8004706:	f100 0304 	add.w	r3, r0, #4
 800470a:	d50a      	bpl.n	8004722 <_printf_i+0xce>
 800470c:	6805      	ldr	r5, [r0, #0]
 800470e:	600b      	str	r3, [r1, #0]
 8004710:	2d00      	cmp	r5, #0
 8004712:	da03      	bge.n	800471c <_printf_i+0xc8>
 8004714:	232d      	movs	r3, #45	; 0x2d
 8004716:	426d      	negs	r5, r5
 8004718:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800471c:	485e      	ldr	r0, [pc, #376]	; (8004898 <_printf_i+0x244>)
 800471e:	230a      	movs	r3, #10
 8004720:	e019      	b.n	8004756 <_printf_i+0x102>
 8004722:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004726:	6805      	ldr	r5, [r0, #0]
 8004728:	600b      	str	r3, [r1, #0]
 800472a:	bf18      	it	ne
 800472c:	b22d      	sxthne	r5, r5
 800472e:	e7ef      	b.n	8004710 <_printf_i+0xbc>
 8004730:	680b      	ldr	r3, [r1, #0]
 8004732:	6825      	ldr	r5, [r4, #0]
 8004734:	1d18      	adds	r0, r3, #4
 8004736:	6008      	str	r0, [r1, #0]
 8004738:	0628      	lsls	r0, r5, #24
 800473a:	d501      	bpl.n	8004740 <_printf_i+0xec>
 800473c:	681d      	ldr	r5, [r3, #0]
 800473e:	e002      	b.n	8004746 <_printf_i+0xf2>
 8004740:	0669      	lsls	r1, r5, #25
 8004742:	d5fb      	bpl.n	800473c <_printf_i+0xe8>
 8004744:	881d      	ldrh	r5, [r3, #0]
 8004746:	4854      	ldr	r0, [pc, #336]	; (8004898 <_printf_i+0x244>)
 8004748:	2f6f      	cmp	r7, #111	; 0x6f
 800474a:	bf0c      	ite	eq
 800474c:	2308      	moveq	r3, #8
 800474e:	230a      	movne	r3, #10
 8004750:	2100      	movs	r1, #0
 8004752:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004756:	6866      	ldr	r6, [r4, #4]
 8004758:	60a6      	str	r6, [r4, #8]
 800475a:	2e00      	cmp	r6, #0
 800475c:	bfa2      	ittt	ge
 800475e:	6821      	ldrge	r1, [r4, #0]
 8004760:	f021 0104 	bicge.w	r1, r1, #4
 8004764:	6021      	strge	r1, [r4, #0]
 8004766:	b90d      	cbnz	r5, 800476c <_printf_i+0x118>
 8004768:	2e00      	cmp	r6, #0
 800476a:	d04d      	beq.n	8004808 <_printf_i+0x1b4>
 800476c:	4616      	mov	r6, r2
 800476e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004772:	fb03 5711 	mls	r7, r3, r1, r5
 8004776:	5dc7      	ldrb	r7, [r0, r7]
 8004778:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800477c:	462f      	mov	r7, r5
 800477e:	42bb      	cmp	r3, r7
 8004780:	460d      	mov	r5, r1
 8004782:	d9f4      	bls.n	800476e <_printf_i+0x11a>
 8004784:	2b08      	cmp	r3, #8
 8004786:	d10b      	bne.n	80047a0 <_printf_i+0x14c>
 8004788:	6823      	ldr	r3, [r4, #0]
 800478a:	07df      	lsls	r7, r3, #31
 800478c:	d508      	bpl.n	80047a0 <_printf_i+0x14c>
 800478e:	6923      	ldr	r3, [r4, #16]
 8004790:	6861      	ldr	r1, [r4, #4]
 8004792:	4299      	cmp	r1, r3
 8004794:	bfde      	ittt	le
 8004796:	2330      	movle	r3, #48	; 0x30
 8004798:	f806 3c01 	strble.w	r3, [r6, #-1]
 800479c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80047a0:	1b92      	subs	r2, r2, r6
 80047a2:	6122      	str	r2, [r4, #16]
 80047a4:	f8cd a000 	str.w	sl, [sp]
 80047a8:	464b      	mov	r3, r9
 80047aa:	aa03      	add	r2, sp, #12
 80047ac:	4621      	mov	r1, r4
 80047ae:	4640      	mov	r0, r8
 80047b0:	f7ff fee2 	bl	8004578 <_printf_common>
 80047b4:	3001      	adds	r0, #1
 80047b6:	d14c      	bne.n	8004852 <_printf_i+0x1fe>
 80047b8:	f04f 30ff 	mov.w	r0, #4294967295
 80047bc:	b004      	add	sp, #16
 80047be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047c2:	4835      	ldr	r0, [pc, #212]	; (8004898 <_printf_i+0x244>)
 80047c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80047c8:	6823      	ldr	r3, [r4, #0]
 80047ca:	680e      	ldr	r6, [r1, #0]
 80047cc:	061f      	lsls	r7, r3, #24
 80047ce:	f856 5b04 	ldr.w	r5, [r6], #4
 80047d2:	600e      	str	r6, [r1, #0]
 80047d4:	d514      	bpl.n	8004800 <_printf_i+0x1ac>
 80047d6:	07d9      	lsls	r1, r3, #31
 80047d8:	bf44      	itt	mi
 80047da:	f043 0320 	orrmi.w	r3, r3, #32
 80047de:	6023      	strmi	r3, [r4, #0]
 80047e0:	b91d      	cbnz	r5, 80047ea <_printf_i+0x196>
 80047e2:	6823      	ldr	r3, [r4, #0]
 80047e4:	f023 0320 	bic.w	r3, r3, #32
 80047e8:	6023      	str	r3, [r4, #0]
 80047ea:	2310      	movs	r3, #16
 80047ec:	e7b0      	b.n	8004750 <_printf_i+0xfc>
 80047ee:	6823      	ldr	r3, [r4, #0]
 80047f0:	f043 0320 	orr.w	r3, r3, #32
 80047f4:	6023      	str	r3, [r4, #0]
 80047f6:	2378      	movs	r3, #120	; 0x78
 80047f8:	4828      	ldr	r0, [pc, #160]	; (800489c <_printf_i+0x248>)
 80047fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047fe:	e7e3      	b.n	80047c8 <_printf_i+0x174>
 8004800:	065e      	lsls	r6, r3, #25
 8004802:	bf48      	it	mi
 8004804:	b2ad      	uxthmi	r5, r5
 8004806:	e7e6      	b.n	80047d6 <_printf_i+0x182>
 8004808:	4616      	mov	r6, r2
 800480a:	e7bb      	b.n	8004784 <_printf_i+0x130>
 800480c:	680b      	ldr	r3, [r1, #0]
 800480e:	6826      	ldr	r6, [r4, #0]
 8004810:	6960      	ldr	r0, [r4, #20]
 8004812:	1d1d      	adds	r5, r3, #4
 8004814:	600d      	str	r5, [r1, #0]
 8004816:	0635      	lsls	r5, r6, #24
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	d501      	bpl.n	8004820 <_printf_i+0x1cc>
 800481c:	6018      	str	r0, [r3, #0]
 800481e:	e002      	b.n	8004826 <_printf_i+0x1d2>
 8004820:	0671      	lsls	r1, r6, #25
 8004822:	d5fb      	bpl.n	800481c <_printf_i+0x1c8>
 8004824:	8018      	strh	r0, [r3, #0]
 8004826:	2300      	movs	r3, #0
 8004828:	6123      	str	r3, [r4, #16]
 800482a:	4616      	mov	r6, r2
 800482c:	e7ba      	b.n	80047a4 <_printf_i+0x150>
 800482e:	680b      	ldr	r3, [r1, #0]
 8004830:	1d1a      	adds	r2, r3, #4
 8004832:	600a      	str	r2, [r1, #0]
 8004834:	681e      	ldr	r6, [r3, #0]
 8004836:	6862      	ldr	r2, [r4, #4]
 8004838:	2100      	movs	r1, #0
 800483a:	4630      	mov	r0, r6
 800483c:	f7fb fcd0 	bl	80001e0 <memchr>
 8004840:	b108      	cbz	r0, 8004846 <_printf_i+0x1f2>
 8004842:	1b80      	subs	r0, r0, r6
 8004844:	6060      	str	r0, [r4, #4]
 8004846:	6863      	ldr	r3, [r4, #4]
 8004848:	6123      	str	r3, [r4, #16]
 800484a:	2300      	movs	r3, #0
 800484c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004850:	e7a8      	b.n	80047a4 <_printf_i+0x150>
 8004852:	6923      	ldr	r3, [r4, #16]
 8004854:	4632      	mov	r2, r6
 8004856:	4649      	mov	r1, r9
 8004858:	4640      	mov	r0, r8
 800485a:	47d0      	blx	sl
 800485c:	3001      	adds	r0, #1
 800485e:	d0ab      	beq.n	80047b8 <_printf_i+0x164>
 8004860:	6823      	ldr	r3, [r4, #0]
 8004862:	079b      	lsls	r3, r3, #30
 8004864:	d413      	bmi.n	800488e <_printf_i+0x23a>
 8004866:	68e0      	ldr	r0, [r4, #12]
 8004868:	9b03      	ldr	r3, [sp, #12]
 800486a:	4298      	cmp	r0, r3
 800486c:	bfb8      	it	lt
 800486e:	4618      	movlt	r0, r3
 8004870:	e7a4      	b.n	80047bc <_printf_i+0x168>
 8004872:	2301      	movs	r3, #1
 8004874:	4632      	mov	r2, r6
 8004876:	4649      	mov	r1, r9
 8004878:	4640      	mov	r0, r8
 800487a:	47d0      	blx	sl
 800487c:	3001      	adds	r0, #1
 800487e:	d09b      	beq.n	80047b8 <_printf_i+0x164>
 8004880:	3501      	adds	r5, #1
 8004882:	68e3      	ldr	r3, [r4, #12]
 8004884:	9903      	ldr	r1, [sp, #12]
 8004886:	1a5b      	subs	r3, r3, r1
 8004888:	42ab      	cmp	r3, r5
 800488a:	dcf2      	bgt.n	8004872 <_printf_i+0x21e>
 800488c:	e7eb      	b.n	8004866 <_printf_i+0x212>
 800488e:	2500      	movs	r5, #0
 8004890:	f104 0619 	add.w	r6, r4, #25
 8004894:	e7f5      	b.n	8004882 <_printf_i+0x22e>
 8004896:	bf00      	nop
 8004898:	08004f91 	.word	0x08004f91
 800489c:	08004fa2 	.word	0x08004fa2

080048a0 <_sbrk_r>:
 80048a0:	b538      	push	{r3, r4, r5, lr}
 80048a2:	4d06      	ldr	r5, [pc, #24]	; (80048bc <_sbrk_r+0x1c>)
 80048a4:	2300      	movs	r3, #0
 80048a6:	4604      	mov	r4, r0
 80048a8:	4608      	mov	r0, r1
 80048aa:	602b      	str	r3, [r5, #0]
 80048ac:	f7fc fb50 	bl	8000f50 <_sbrk>
 80048b0:	1c43      	adds	r3, r0, #1
 80048b2:	d102      	bne.n	80048ba <_sbrk_r+0x1a>
 80048b4:	682b      	ldr	r3, [r5, #0]
 80048b6:	b103      	cbz	r3, 80048ba <_sbrk_r+0x1a>
 80048b8:	6023      	str	r3, [r4, #0]
 80048ba:	bd38      	pop	{r3, r4, r5, pc}
 80048bc:	20000240 	.word	0x20000240

080048c0 <__sread>:
 80048c0:	b510      	push	{r4, lr}
 80048c2:	460c      	mov	r4, r1
 80048c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048c8:	f000 fab4 	bl	8004e34 <_read_r>
 80048cc:	2800      	cmp	r0, #0
 80048ce:	bfab      	itete	ge
 80048d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80048d2:	89a3      	ldrhlt	r3, [r4, #12]
 80048d4:	181b      	addge	r3, r3, r0
 80048d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80048da:	bfac      	ite	ge
 80048dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80048de:	81a3      	strhlt	r3, [r4, #12]
 80048e0:	bd10      	pop	{r4, pc}

080048e2 <__swrite>:
 80048e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048e6:	461f      	mov	r7, r3
 80048e8:	898b      	ldrh	r3, [r1, #12]
 80048ea:	05db      	lsls	r3, r3, #23
 80048ec:	4605      	mov	r5, r0
 80048ee:	460c      	mov	r4, r1
 80048f0:	4616      	mov	r6, r2
 80048f2:	d505      	bpl.n	8004900 <__swrite+0x1e>
 80048f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048f8:	2302      	movs	r3, #2
 80048fa:	2200      	movs	r2, #0
 80048fc:	f000 f9c8 	bl	8004c90 <_lseek_r>
 8004900:	89a3      	ldrh	r3, [r4, #12]
 8004902:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004906:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800490a:	81a3      	strh	r3, [r4, #12]
 800490c:	4632      	mov	r2, r6
 800490e:	463b      	mov	r3, r7
 8004910:	4628      	mov	r0, r5
 8004912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004916:	f000 b869 	b.w	80049ec <_write_r>

0800491a <__sseek>:
 800491a:	b510      	push	{r4, lr}
 800491c:	460c      	mov	r4, r1
 800491e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004922:	f000 f9b5 	bl	8004c90 <_lseek_r>
 8004926:	1c43      	adds	r3, r0, #1
 8004928:	89a3      	ldrh	r3, [r4, #12]
 800492a:	bf15      	itete	ne
 800492c:	6560      	strne	r0, [r4, #84]	; 0x54
 800492e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004932:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004936:	81a3      	strheq	r3, [r4, #12]
 8004938:	bf18      	it	ne
 800493a:	81a3      	strhne	r3, [r4, #12]
 800493c:	bd10      	pop	{r4, pc}

0800493e <__sclose>:
 800493e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004942:	f000 b8d3 	b.w	8004aec <_close_r>
	...

08004948 <__swbuf_r>:
 8004948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800494a:	460e      	mov	r6, r1
 800494c:	4614      	mov	r4, r2
 800494e:	4605      	mov	r5, r0
 8004950:	b118      	cbz	r0, 800495a <__swbuf_r+0x12>
 8004952:	6983      	ldr	r3, [r0, #24]
 8004954:	b90b      	cbnz	r3, 800495a <__swbuf_r+0x12>
 8004956:	f7ff fbbb 	bl	80040d0 <__sinit>
 800495a:	4b21      	ldr	r3, [pc, #132]	; (80049e0 <__swbuf_r+0x98>)
 800495c:	429c      	cmp	r4, r3
 800495e:	d12b      	bne.n	80049b8 <__swbuf_r+0x70>
 8004960:	686c      	ldr	r4, [r5, #4]
 8004962:	69a3      	ldr	r3, [r4, #24]
 8004964:	60a3      	str	r3, [r4, #8]
 8004966:	89a3      	ldrh	r3, [r4, #12]
 8004968:	071a      	lsls	r2, r3, #28
 800496a:	d52f      	bpl.n	80049cc <__swbuf_r+0x84>
 800496c:	6923      	ldr	r3, [r4, #16]
 800496e:	b36b      	cbz	r3, 80049cc <__swbuf_r+0x84>
 8004970:	6923      	ldr	r3, [r4, #16]
 8004972:	6820      	ldr	r0, [r4, #0]
 8004974:	1ac0      	subs	r0, r0, r3
 8004976:	6963      	ldr	r3, [r4, #20]
 8004978:	b2f6      	uxtb	r6, r6
 800497a:	4283      	cmp	r3, r0
 800497c:	4637      	mov	r7, r6
 800497e:	dc04      	bgt.n	800498a <__swbuf_r+0x42>
 8004980:	4621      	mov	r1, r4
 8004982:	4628      	mov	r0, r5
 8004984:	f000 f948 	bl	8004c18 <_fflush_r>
 8004988:	bb30      	cbnz	r0, 80049d8 <__swbuf_r+0x90>
 800498a:	68a3      	ldr	r3, [r4, #8]
 800498c:	3b01      	subs	r3, #1
 800498e:	60a3      	str	r3, [r4, #8]
 8004990:	6823      	ldr	r3, [r4, #0]
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	6022      	str	r2, [r4, #0]
 8004996:	701e      	strb	r6, [r3, #0]
 8004998:	6963      	ldr	r3, [r4, #20]
 800499a:	3001      	adds	r0, #1
 800499c:	4283      	cmp	r3, r0
 800499e:	d004      	beq.n	80049aa <__swbuf_r+0x62>
 80049a0:	89a3      	ldrh	r3, [r4, #12]
 80049a2:	07db      	lsls	r3, r3, #31
 80049a4:	d506      	bpl.n	80049b4 <__swbuf_r+0x6c>
 80049a6:	2e0a      	cmp	r6, #10
 80049a8:	d104      	bne.n	80049b4 <__swbuf_r+0x6c>
 80049aa:	4621      	mov	r1, r4
 80049ac:	4628      	mov	r0, r5
 80049ae:	f000 f933 	bl	8004c18 <_fflush_r>
 80049b2:	b988      	cbnz	r0, 80049d8 <__swbuf_r+0x90>
 80049b4:	4638      	mov	r0, r7
 80049b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049b8:	4b0a      	ldr	r3, [pc, #40]	; (80049e4 <__swbuf_r+0x9c>)
 80049ba:	429c      	cmp	r4, r3
 80049bc:	d101      	bne.n	80049c2 <__swbuf_r+0x7a>
 80049be:	68ac      	ldr	r4, [r5, #8]
 80049c0:	e7cf      	b.n	8004962 <__swbuf_r+0x1a>
 80049c2:	4b09      	ldr	r3, [pc, #36]	; (80049e8 <__swbuf_r+0xa0>)
 80049c4:	429c      	cmp	r4, r3
 80049c6:	bf08      	it	eq
 80049c8:	68ec      	ldreq	r4, [r5, #12]
 80049ca:	e7ca      	b.n	8004962 <__swbuf_r+0x1a>
 80049cc:	4621      	mov	r1, r4
 80049ce:	4628      	mov	r0, r5
 80049d0:	f000 f81e 	bl	8004a10 <__swsetup_r>
 80049d4:	2800      	cmp	r0, #0
 80049d6:	d0cb      	beq.n	8004970 <__swbuf_r+0x28>
 80049d8:	f04f 37ff 	mov.w	r7, #4294967295
 80049dc:	e7ea      	b.n	80049b4 <__swbuf_r+0x6c>
 80049de:	bf00      	nop
 80049e0:	08004f40 	.word	0x08004f40
 80049e4:	08004f60 	.word	0x08004f60
 80049e8:	08004f20 	.word	0x08004f20

080049ec <_write_r>:
 80049ec:	b538      	push	{r3, r4, r5, lr}
 80049ee:	4d07      	ldr	r5, [pc, #28]	; (8004a0c <_write_r+0x20>)
 80049f0:	4604      	mov	r4, r0
 80049f2:	4608      	mov	r0, r1
 80049f4:	4611      	mov	r1, r2
 80049f6:	2200      	movs	r2, #0
 80049f8:	602a      	str	r2, [r5, #0]
 80049fa:	461a      	mov	r2, r3
 80049fc:	f7fc fa52 	bl	8000ea4 <_write>
 8004a00:	1c43      	adds	r3, r0, #1
 8004a02:	d102      	bne.n	8004a0a <_write_r+0x1e>
 8004a04:	682b      	ldr	r3, [r5, #0]
 8004a06:	b103      	cbz	r3, 8004a0a <_write_r+0x1e>
 8004a08:	6023      	str	r3, [r4, #0]
 8004a0a:	bd38      	pop	{r3, r4, r5, pc}
 8004a0c:	20000240 	.word	0x20000240

08004a10 <__swsetup_r>:
 8004a10:	4b32      	ldr	r3, [pc, #200]	; (8004adc <__swsetup_r+0xcc>)
 8004a12:	b570      	push	{r4, r5, r6, lr}
 8004a14:	681d      	ldr	r5, [r3, #0]
 8004a16:	4606      	mov	r6, r0
 8004a18:	460c      	mov	r4, r1
 8004a1a:	b125      	cbz	r5, 8004a26 <__swsetup_r+0x16>
 8004a1c:	69ab      	ldr	r3, [r5, #24]
 8004a1e:	b913      	cbnz	r3, 8004a26 <__swsetup_r+0x16>
 8004a20:	4628      	mov	r0, r5
 8004a22:	f7ff fb55 	bl	80040d0 <__sinit>
 8004a26:	4b2e      	ldr	r3, [pc, #184]	; (8004ae0 <__swsetup_r+0xd0>)
 8004a28:	429c      	cmp	r4, r3
 8004a2a:	d10f      	bne.n	8004a4c <__swsetup_r+0x3c>
 8004a2c:	686c      	ldr	r4, [r5, #4]
 8004a2e:	89a3      	ldrh	r3, [r4, #12]
 8004a30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a34:	0719      	lsls	r1, r3, #28
 8004a36:	d42c      	bmi.n	8004a92 <__swsetup_r+0x82>
 8004a38:	06dd      	lsls	r5, r3, #27
 8004a3a:	d411      	bmi.n	8004a60 <__swsetup_r+0x50>
 8004a3c:	2309      	movs	r3, #9
 8004a3e:	6033      	str	r3, [r6, #0]
 8004a40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004a44:	81a3      	strh	r3, [r4, #12]
 8004a46:	f04f 30ff 	mov.w	r0, #4294967295
 8004a4a:	e03e      	b.n	8004aca <__swsetup_r+0xba>
 8004a4c:	4b25      	ldr	r3, [pc, #148]	; (8004ae4 <__swsetup_r+0xd4>)
 8004a4e:	429c      	cmp	r4, r3
 8004a50:	d101      	bne.n	8004a56 <__swsetup_r+0x46>
 8004a52:	68ac      	ldr	r4, [r5, #8]
 8004a54:	e7eb      	b.n	8004a2e <__swsetup_r+0x1e>
 8004a56:	4b24      	ldr	r3, [pc, #144]	; (8004ae8 <__swsetup_r+0xd8>)
 8004a58:	429c      	cmp	r4, r3
 8004a5a:	bf08      	it	eq
 8004a5c:	68ec      	ldreq	r4, [r5, #12]
 8004a5e:	e7e6      	b.n	8004a2e <__swsetup_r+0x1e>
 8004a60:	0758      	lsls	r0, r3, #29
 8004a62:	d512      	bpl.n	8004a8a <__swsetup_r+0x7a>
 8004a64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a66:	b141      	cbz	r1, 8004a7a <__swsetup_r+0x6a>
 8004a68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a6c:	4299      	cmp	r1, r3
 8004a6e:	d002      	beq.n	8004a76 <__swsetup_r+0x66>
 8004a70:	4630      	mov	r0, r6
 8004a72:	f000 f98f 	bl	8004d94 <_free_r>
 8004a76:	2300      	movs	r3, #0
 8004a78:	6363      	str	r3, [r4, #52]	; 0x34
 8004a7a:	89a3      	ldrh	r3, [r4, #12]
 8004a7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004a80:	81a3      	strh	r3, [r4, #12]
 8004a82:	2300      	movs	r3, #0
 8004a84:	6063      	str	r3, [r4, #4]
 8004a86:	6923      	ldr	r3, [r4, #16]
 8004a88:	6023      	str	r3, [r4, #0]
 8004a8a:	89a3      	ldrh	r3, [r4, #12]
 8004a8c:	f043 0308 	orr.w	r3, r3, #8
 8004a90:	81a3      	strh	r3, [r4, #12]
 8004a92:	6923      	ldr	r3, [r4, #16]
 8004a94:	b94b      	cbnz	r3, 8004aaa <__swsetup_r+0x9a>
 8004a96:	89a3      	ldrh	r3, [r4, #12]
 8004a98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004a9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aa0:	d003      	beq.n	8004aaa <__swsetup_r+0x9a>
 8004aa2:	4621      	mov	r1, r4
 8004aa4:	4630      	mov	r0, r6
 8004aa6:	f000 f929 	bl	8004cfc <__smakebuf_r>
 8004aaa:	89a0      	ldrh	r0, [r4, #12]
 8004aac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ab0:	f010 0301 	ands.w	r3, r0, #1
 8004ab4:	d00a      	beq.n	8004acc <__swsetup_r+0xbc>
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60a3      	str	r3, [r4, #8]
 8004aba:	6963      	ldr	r3, [r4, #20]
 8004abc:	425b      	negs	r3, r3
 8004abe:	61a3      	str	r3, [r4, #24]
 8004ac0:	6923      	ldr	r3, [r4, #16]
 8004ac2:	b943      	cbnz	r3, 8004ad6 <__swsetup_r+0xc6>
 8004ac4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ac8:	d1ba      	bne.n	8004a40 <__swsetup_r+0x30>
 8004aca:	bd70      	pop	{r4, r5, r6, pc}
 8004acc:	0781      	lsls	r1, r0, #30
 8004ace:	bf58      	it	pl
 8004ad0:	6963      	ldrpl	r3, [r4, #20]
 8004ad2:	60a3      	str	r3, [r4, #8]
 8004ad4:	e7f4      	b.n	8004ac0 <__swsetup_r+0xb0>
 8004ad6:	2000      	movs	r0, #0
 8004ad8:	e7f7      	b.n	8004aca <__swsetup_r+0xba>
 8004ada:	bf00      	nop
 8004adc:	20000010 	.word	0x20000010
 8004ae0:	08004f40 	.word	0x08004f40
 8004ae4:	08004f60 	.word	0x08004f60
 8004ae8:	08004f20 	.word	0x08004f20

08004aec <_close_r>:
 8004aec:	b538      	push	{r3, r4, r5, lr}
 8004aee:	4d06      	ldr	r5, [pc, #24]	; (8004b08 <_close_r+0x1c>)
 8004af0:	2300      	movs	r3, #0
 8004af2:	4604      	mov	r4, r0
 8004af4:	4608      	mov	r0, r1
 8004af6:	602b      	str	r3, [r5, #0]
 8004af8:	f7fc f9f6 	bl	8000ee8 <_close>
 8004afc:	1c43      	adds	r3, r0, #1
 8004afe:	d102      	bne.n	8004b06 <_close_r+0x1a>
 8004b00:	682b      	ldr	r3, [r5, #0]
 8004b02:	b103      	cbz	r3, 8004b06 <_close_r+0x1a>
 8004b04:	6023      	str	r3, [r4, #0]
 8004b06:	bd38      	pop	{r3, r4, r5, pc}
 8004b08:	20000240 	.word	0x20000240

08004b0c <__sflush_r>:
 8004b0c:	898a      	ldrh	r2, [r1, #12]
 8004b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b12:	4605      	mov	r5, r0
 8004b14:	0710      	lsls	r0, r2, #28
 8004b16:	460c      	mov	r4, r1
 8004b18:	d458      	bmi.n	8004bcc <__sflush_r+0xc0>
 8004b1a:	684b      	ldr	r3, [r1, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	dc05      	bgt.n	8004b2c <__sflush_r+0x20>
 8004b20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	dc02      	bgt.n	8004b2c <__sflush_r+0x20>
 8004b26:	2000      	movs	r0, #0
 8004b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b2e:	2e00      	cmp	r6, #0
 8004b30:	d0f9      	beq.n	8004b26 <__sflush_r+0x1a>
 8004b32:	2300      	movs	r3, #0
 8004b34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b38:	682f      	ldr	r7, [r5, #0]
 8004b3a:	602b      	str	r3, [r5, #0]
 8004b3c:	d032      	beq.n	8004ba4 <__sflush_r+0x98>
 8004b3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b40:	89a3      	ldrh	r3, [r4, #12]
 8004b42:	075a      	lsls	r2, r3, #29
 8004b44:	d505      	bpl.n	8004b52 <__sflush_r+0x46>
 8004b46:	6863      	ldr	r3, [r4, #4]
 8004b48:	1ac0      	subs	r0, r0, r3
 8004b4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b4c:	b10b      	cbz	r3, 8004b52 <__sflush_r+0x46>
 8004b4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b50:	1ac0      	subs	r0, r0, r3
 8004b52:	2300      	movs	r3, #0
 8004b54:	4602      	mov	r2, r0
 8004b56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b58:	6a21      	ldr	r1, [r4, #32]
 8004b5a:	4628      	mov	r0, r5
 8004b5c:	47b0      	blx	r6
 8004b5e:	1c43      	adds	r3, r0, #1
 8004b60:	89a3      	ldrh	r3, [r4, #12]
 8004b62:	d106      	bne.n	8004b72 <__sflush_r+0x66>
 8004b64:	6829      	ldr	r1, [r5, #0]
 8004b66:	291d      	cmp	r1, #29
 8004b68:	d82c      	bhi.n	8004bc4 <__sflush_r+0xb8>
 8004b6a:	4a2a      	ldr	r2, [pc, #168]	; (8004c14 <__sflush_r+0x108>)
 8004b6c:	40ca      	lsrs	r2, r1
 8004b6e:	07d6      	lsls	r6, r2, #31
 8004b70:	d528      	bpl.n	8004bc4 <__sflush_r+0xb8>
 8004b72:	2200      	movs	r2, #0
 8004b74:	6062      	str	r2, [r4, #4]
 8004b76:	04d9      	lsls	r1, r3, #19
 8004b78:	6922      	ldr	r2, [r4, #16]
 8004b7a:	6022      	str	r2, [r4, #0]
 8004b7c:	d504      	bpl.n	8004b88 <__sflush_r+0x7c>
 8004b7e:	1c42      	adds	r2, r0, #1
 8004b80:	d101      	bne.n	8004b86 <__sflush_r+0x7a>
 8004b82:	682b      	ldr	r3, [r5, #0]
 8004b84:	b903      	cbnz	r3, 8004b88 <__sflush_r+0x7c>
 8004b86:	6560      	str	r0, [r4, #84]	; 0x54
 8004b88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b8a:	602f      	str	r7, [r5, #0]
 8004b8c:	2900      	cmp	r1, #0
 8004b8e:	d0ca      	beq.n	8004b26 <__sflush_r+0x1a>
 8004b90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b94:	4299      	cmp	r1, r3
 8004b96:	d002      	beq.n	8004b9e <__sflush_r+0x92>
 8004b98:	4628      	mov	r0, r5
 8004b9a:	f000 f8fb 	bl	8004d94 <_free_r>
 8004b9e:	2000      	movs	r0, #0
 8004ba0:	6360      	str	r0, [r4, #52]	; 0x34
 8004ba2:	e7c1      	b.n	8004b28 <__sflush_r+0x1c>
 8004ba4:	6a21      	ldr	r1, [r4, #32]
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	4628      	mov	r0, r5
 8004baa:	47b0      	blx	r6
 8004bac:	1c41      	adds	r1, r0, #1
 8004bae:	d1c7      	bne.n	8004b40 <__sflush_r+0x34>
 8004bb0:	682b      	ldr	r3, [r5, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d0c4      	beq.n	8004b40 <__sflush_r+0x34>
 8004bb6:	2b1d      	cmp	r3, #29
 8004bb8:	d001      	beq.n	8004bbe <__sflush_r+0xb2>
 8004bba:	2b16      	cmp	r3, #22
 8004bbc:	d101      	bne.n	8004bc2 <__sflush_r+0xb6>
 8004bbe:	602f      	str	r7, [r5, #0]
 8004bc0:	e7b1      	b.n	8004b26 <__sflush_r+0x1a>
 8004bc2:	89a3      	ldrh	r3, [r4, #12]
 8004bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bc8:	81a3      	strh	r3, [r4, #12]
 8004bca:	e7ad      	b.n	8004b28 <__sflush_r+0x1c>
 8004bcc:	690f      	ldr	r7, [r1, #16]
 8004bce:	2f00      	cmp	r7, #0
 8004bd0:	d0a9      	beq.n	8004b26 <__sflush_r+0x1a>
 8004bd2:	0793      	lsls	r3, r2, #30
 8004bd4:	680e      	ldr	r6, [r1, #0]
 8004bd6:	bf08      	it	eq
 8004bd8:	694b      	ldreq	r3, [r1, #20]
 8004bda:	600f      	str	r7, [r1, #0]
 8004bdc:	bf18      	it	ne
 8004bde:	2300      	movne	r3, #0
 8004be0:	eba6 0807 	sub.w	r8, r6, r7
 8004be4:	608b      	str	r3, [r1, #8]
 8004be6:	f1b8 0f00 	cmp.w	r8, #0
 8004bea:	dd9c      	ble.n	8004b26 <__sflush_r+0x1a>
 8004bec:	6a21      	ldr	r1, [r4, #32]
 8004bee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004bf0:	4643      	mov	r3, r8
 8004bf2:	463a      	mov	r2, r7
 8004bf4:	4628      	mov	r0, r5
 8004bf6:	47b0      	blx	r6
 8004bf8:	2800      	cmp	r0, #0
 8004bfa:	dc06      	bgt.n	8004c0a <__sflush_r+0xfe>
 8004bfc:	89a3      	ldrh	r3, [r4, #12]
 8004bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c02:	81a3      	strh	r3, [r4, #12]
 8004c04:	f04f 30ff 	mov.w	r0, #4294967295
 8004c08:	e78e      	b.n	8004b28 <__sflush_r+0x1c>
 8004c0a:	4407      	add	r7, r0
 8004c0c:	eba8 0800 	sub.w	r8, r8, r0
 8004c10:	e7e9      	b.n	8004be6 <__sflush_r+0xda>
 8004c12:	bf00      	nop
 8004c14:	20400001 	.word	0x20400001

08004c18 <_fflush_r>:
 8004c18:	b538      	push	{r3, r4, r5, lr}
 8004c1a:	690b      	ldr	r3, [r1, #16]
 8004c1c:	4605      	mov	r5, r0
 8004c1e:	460c      	mov	r4, r1
 8004c20:	b913      	cbnz	r3, 8004c28 <_fflush_r+0x10>
 8004c22:	2500      	movs	r5, #0
 8004c24:	4628      	mov	r0, r5
 8004c26:	bd38      	pop	{r3, r4, r5, pc}
 8004c28:	b118      	cbz	r0, 8004c32 <_fflush_r+0x1a>
 8004c2a:	6983      	ldr	r3, [r0, #24]
 8004c2c:	b90b      	cbnz	r3, 8004c32 <_fflush_r+0x1a>
 8004c2e:	f7ff fa4f 	bl	80040d0 <__sinit>
 8004c32:	4b14      	ldr	r3, [pc, #80]	; (8004c84 <_fflush_r+0x6c>)
 8004c34:	429c      	cmp	r4, r3
 8004c36:	d11b      	bne.n	8004c70 <_fflush_r+0x58>
 8004c38:	686c      	ldr	r4, [r5, #4]
 8004c3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d0ef      	beq.n	8004c22 <_fflush_r+0xa>
 8004c42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c44:	07d0      	lsls	r0, r2, #31
 8004c46:	d404      	bmi.n	8004c52 <_fflush_r+0x3a>
 8004c48:	0599      	lsls	r1, r3, #22
 8004c4a:	d402      	bmi.n	8004c52 <_fflush_r+0x3a>
 8004c4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c4e:	f7ff fadd 	bl	800420c <__retarget_lock_acquire_recursive>
 8004c52:	4628      	mov	r0, r5
 8004c54:	4621      	mov	r1, r4
 8004c56:	f7ff ff59 	bl	8004b0c <__sflush_r>
 8004c5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c5c:	07da      	lsls	r2, r3, #31
 8004c5e:	4605      	mov	r5, r0
 8004c60:	d4e0      	bmi.n	8004c24 <_fflush_r+0xc>
 8004c62:	89a3      	ldrh	r3, [r4, #12]
 8004c64:	059b      	lsls	r3, r3, #22
 8004c66:	d4dd      	bmi.n	8004c24 <_fflush_r+0xc>
 8004c68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c6a:	f7ff fad0 	bl	800420e <__retarget_lock_release_recursive>
 8004c6e:	e7d9      	b.n	8004c24 <_fflush_r+0xc>
 8004c70:	4b05      	ldr	r3, [pc, #20]	; (8004c88 <_fflush_r+0x70>)
 8004c72:	429c      	cmp	r4, r3
 8004c74:	d101      	bne.n	8004c7a <_fflush_r+0x62>
 8004c76:	68ac      	ldr	r4, [r5, #8]
 8004c78:	e7df      	b.n	8004c3a <_fflush_r+0x22>
 8004c7a:	4b04      	ldr	r3, [pc, #16]	; (8004c8c <_fflush_r+0x74>)
 8004c7c:	429c      	cmp	r4, r3
 8004c7e:	bf08      	it	eq
 8004c80:	68ec      	ldreq	r4, [r5, #12]
 8004c82:	e7da      	b.n	8004c3a <_fflush_r+0x22>
 8004c84:	08004f40 	.word	0x08004f40
 8004c88:	08004f60 	.word	0x08004f60
 8004c8c:	08004f20 	.word	0x08004f20

08004c90 <_lseek_r>:
 8004c90:	b538      	push	{r3, r4, r5, lr}
 8004c92:	4d07      	ldr	r5, [pc, #28]	; (8004cb0 <_lseek_r+0x20>)
 8004c94:	4604      	mov	r4, r0
 8004c96:	4608      	mov	r0, r1
 8004c98:	4611      	mov	r1, r2
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	602a      	str	r2, [r5, #0]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	f7fc f949 	bl	8000f36 <_lseek>
 8004ca4:	1c43      	adds	r3, r0, #1
 8004ca6:	d102      	bne.n	8004cae <_lseek_r+0x1e>
 8004ca8:	682b      	ldr	r3, [r5, #0]
 8004caa:	b103      	cbz	r3, 8004cae <_lseek_r+0x1e>
 8004cac:	6023      	str	r3, [r4, #0]
 8004cae:	bd38      	pop	{r3, r4, r5, pc}
 8004cb0:	20000240 	.word	0x20000240

08004cb4 <__swhatbuf_r>:
 8004cb4:	b570      	push	{r4, r5, r6, lr}
 8004cb6:	460e      	mov	r6, r1
 8004cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cbc:	2900      	cmp	r1, #0
 8004cbe:	b096      	sub	sp, #88	; 0x58
 8004cc0:	4614      	mov	r4, r2
 8004cc2:	461d      	mov	r5, r3
 8004cc4:	da07      	bge.n	8004cd6 <__swhatbuf_r+0x22>
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	602b      	str	r3, [r5, #0]
 8004cca:	89b3      	ldrh	r3, [r6, #12]
 8004ccc:	061a      	lsls	r2, r3, #24
 8004cce:	d410      	bmi.n	8004cf2 <__swhatbuf_r+0x3e>
 8004cd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cd4:	e00e      	b.n	8004cf4 <__swhatbuf_r+0x40>
 8004cd6:	466a      	mov	r2, sp
 8004cd8:	f000 f8be 	bl	8004e58 <_fstat_r>
 8004cdc:	2800      	cmp	r0, #0
 8004cde:	dbf2      	blt.n	8004cc6 <__swhatbuf_r+0x12>
 8004ce0:	9a01      	ldr	r2, [sp, #4]
 8004ce2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004ce6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004cea:	425a      	negs	r2, r3
 8004cec:	415a      	adcs	r2, r3
 8004cee:	602a      	str	r2, [r5, #0]
 8004cf0:	e7ee      	b.n	8004cd0 <__swhatbuf_r+0x1c>
 8004cf2:	2340      	movs	r3, #64	; 0x40
 8004cf4:	2000      	movs	r0, #0
 8004cf6:	6023      	str	r3, [r4, #0]
 8004cf8:	b016      	add	sp, #88	; 0x58
 8004cfa:	bd70      	pop	{r4, r5, r6, pc}

08004cfc <__smakebuf_r>:
 8004cfc:	898b      	ldrh	r3, [r1, #12]
 8004cfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d00:	079d      	lsls	r5, r3, #30
 8004d02:	4606      	mov	r6, r0
 8004d04:	460c      	mov	r4, r1
 8004d06:	d507      	bpl.n	8004d18 <__smakebuf_r+0x1c>
 8004d08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d0c:	6023      	str	r3, [r4, #0]
 8004d0e:	6123      	str	r3, [r4, #16]
 8004d10:	2301      	movs	r3, #1
 8004d12:	6163      	str	r3, [r4, #20]
 8004d14:	b002      	add	sp, #8
 8004d16:	bd70      	pop	{r4, r5, r6, pc}
 8004d18:	ab01      	add	r3, sp, #4
 8004d1a:	466a      	mov	r2, sp
 8004d1c:	f7ff ffca 	bl	8004cb4 <__swhatbuf_r>
 8004d20:	9900      	ldr	r1, [sp, #0]
 8004d22:	4605      	mov	r5, r0
 8004d24:	4630      	mov	r0, r6
 8004d26:	f7ff fa73 	bl	8004210 <_malloc_r>
 8004d2a:	b948      	cbnz	r0, 8004d40 <__smakebuf_r+0x44>
 8004d2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d30:	059a      	lsls	r2, r3, #22
 8004d32:	d4ef      	bmi.n	8004d14 <__smakebuf_r+0x18>
 8004d34:	f023 0303 	bic.w	r3, r3, #3
 8004d38:	f043 0302 	orr.w	r3, r3, #2
 8004d3c:	81a3      	strh	r3, [r4, #12]
 8004d3e:	e7e3      	b.n	8004d08 <__smakebuf_r+0xc>
 8004d40:	4b0d      	ldr	r3, [pc, #52]	; (8004d78 <__smakebuf_r+0x7c>)
 8004d42:	62b3      	str	r3, [r6, #40]	; 0x28
 8004d44:	89a3      	ldrh	r3, [r4, #12]
 8004d46:	6020      	str	r0, [r4, #0]
 8004d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d4c:	81a3      	strh	r3, [r4, #12]
 8004d4e:	9b00      	ldr	r3, [sp, #0]
 8004d50:	6163      	str	r3, [r4, #20]
 8004d52:	9b01      	ldr	r3, [sp, #4]
 8004d54:	6120      	str	r0, [r4, #16]
 8004d56:	b15b      	cbz	r3, 8004d70 <__smakebuf_r+0x74>
 8004d58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d5c:	4630      	mov	r0, r6
 8004d5e:	f000 f88d 	bl	8004e7c <_isatty_r>
 8004d62:	b128      	cbz	r0, 8004d70 <__smakebuf_r+0x74>
 8004d64:	89a3      	ldrh	r3, [r4, #12]
 8004d66:	f023 0303 	bic.w	r3, r3, #3
 8004d6a:	f043 0301 	orr.w	r3, r3, #1
 8004d6e:	81a3      	strh	r3, [r4, #12]
 8004d70:	89a0      	ldrh	r0, [r4, #12]
 8004d72:	4305      	orrs	r5, r0
 8004d74:	81a5      	strh	r5, [r4, #12]
 8004d76:	e7cd      	b.n	8004d14 <__smakebuf_r+0x18>
 8004d78:	08004069 	.word	0x08004069

08004d7c <__malloc_lock>:
 8004d7c:	4801      	ldr	r0, [pc, #4]	; (8004d84 <__malloc_lock+0x8>)
 8004d7e:	f7ff ba45 	b.w	800420c <__retarget_lock_acquire_recursive>
 8004d82:	bf00      	nop
 8004d84:	20000238 	.word	0x20000238

08004d88 <__malloc_unlock>:
 8004d88:	4801      	ldr	r0, [pc, #4]	; (8004d90 <__malloc_unlock+0x8>)
 8004d8a:	f7ff ba40 	b.w	800420e <__retarget_lock_release_recursive>
 8004d8e:	bf00      	nop
 8004d90:	20000238 	.word	0x20000238

08004d94 <_free_r>:
 8004d94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d96:	2900      	cmp	r1, #0
 8004d98:	d048      	beq.n	8004e2c <_free_r+0x98>
 8004d9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d9e:	9001      	str	r0, [sp, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f1a1 0404 	sub.w	r4, r1, #4
 8004da6:	bfb8      	it	lt
 8004da8:	18e4      	addlt	r4, r4, r3
 8004daa:	f7ff ffe7 	bl	8004d7c <__malloc_lock>
 8004dae:	4a20      	ldr	r2, [pc, #128]	; (8004e30 <_free_r+0x9c>)
 8004db0:	9801      	ldr	r0, [sp, #4]
 8004db2:	6813      	ldr	r3, [r2, #0]
 8004db4:	4615      	mov	r5, r2
 8004db6:	b933      	cbnz	r3, 8004dc6 <_free_r+0x32>
 8004db8:	6063      	str	r3, [r4, #4]
 8004dba:	6014      	str	r4, [r2, #0]
 8004dbc:	b003      	add	sp, #12
 8004dbe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004dc2:	f7ff bfe1 	b.w	8004d88 <__malloc_unlock>
 8004dc6:	42a3      	cmp	r3, r4
 8004dc8:	d90b      	bls.n	8004de2 <_free_r+0x4e>
 8004dca:	6821      	ldr	r1, [r4, #0]
 8004dcc:	1862      	adds	r2, r4, r1
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	bf04      	itt	eq
 8004dd2:	681a      	ldreq	r2, [r3, #0]
 8004dd4:	685b      	ldreq	r3, [r3, #4]
 8004dd6:	6063      	str	r3, [r4, #4]
 8004dd8:	bf04      	itt	eq
 8004dda:	1852      	addeq	r2, r2, r1
 8004ddc:	6022      	streq	r2, [r4, #0]
 8004dde:	602c      	str	r4, [r5, #0]
 8004de0:	e7ec      	b.n	8004dbc <_free_r+0x28>
 8004de2:	461a      	mov	r2, r3
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	b10b      	cbz	r3, 8004dec <_free_r+0x58>
 8004de8:	42a3      	cmp	r3, r4
 8004dea:	d9fa      	bls.n	8004de2 <_free_r+0x4e>
 8004dec:	6811      	ldr	r1, [r2, #0]
 8004dee:	1855      	adds	r5, r2, r1
 8004df0:	42a5      	cmp	r5, r4
 8004df2:	d10b      	bne.n	8004e0c <_free_r+0x78>
 8004df4:	6824      	ldr	r4, [r4, #0]
 8004df6:	4421      	add	r1, r4
 8004df8:	1854      	adds	r4, r2, r1
 8004dfa:	42a3      	cmp	r3, r4
 8004dfc:	6011      	str	r1, [r2, #0]
 8004dfe:	d1dd      	bne.n	8004dbc <_free_r+0x28>
 8004e00:	681c      	ldr	r4, [r3, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	6053      	str	r3, [r2, #4]
 8004e06:	4421      	add	r1, r4
 8004e08:	6011      	str	r1, [r2, #0]
 8004e0a:	e7d7      	b.n	8004dbc <_free_r+0x28>
 8004e0c:	d902      	bls.n	8004e14 <_free_r+0x80>
 8004e0e:	230c      	movs	r3, #12
 8004e10:	6003      	str	r3, [r0, #0]
 8004e12:	e7d3      	b.n	8004dbc <_free_r+0x28>
 8004e14:	6825      	ldr	r5, [r4, #0]
 8004e16:	1961      	adds	r1, r4, r5
 8004e18:	428b      	cmp	r3, r1
 8004e1a:	bf04      	itt	eq
 8004e1c:	6819      	ldreq	r1, [r3, #0]
 8004e1e:	685b      	ldreq	r3, [r3, #4]
 8004e20:	6063      	str	r3, [r4, #4]
 8004e22:	bf04      	itt	eq
 8004e24:	1949      	addeq	r1, r1, r5
 8004e26:	6021      	streq	r1, [r4, #0]
 8004e28:	6054      	str	r4, [r2, #4]
 8004e2a:	e7c7      	b.n	8004dbc <_free_r+0x28>
 8004e2c:	b003      	add	sp, #12
 8004e2e:	bd30      	pop	{r4, r5, pc}
 8004e30:	2000009c 	.word	0x2000009c

08004e34 <_read_r>:
 8004e34:	b538      	push	{r3, r4, r5, lr}
 8004e36:	4d07      	ldr	r5, [pc, #28]	; (8004e54 <_read_r+0x20>)
 8004e38:	4604      	mov	r4, r0
 8004e3a:	4608      	mov	r0, r1
 8004e3c:	4611      	mov	r1, r2
 8004e3e:	2200      	movs	r2, #0
 8004e40:	602a      	str	r2, [r5, #0]
 8004e42:	461a      	mov	r2, r3
 8004e44:	f7fc f810 	bl	8000e68 <_read>
 8004e48:	1c43      	adds	r3, r0, #1
 8004e4a:	d102      	bne.n	8004e52 <_read_r+0x1e>
 8004e4c:	682b      	ldr	r3, [r5, #0]
 8004e4e:	b103      	cbz	r3, 8004e52 <_read_r+0x1e>
 8004e50:	6023      	str	r3, [r4, #0]
 8004e52:	bd38      	pop	{r3, r4, r5, pc}
 8004e54:	20000240 	.word	0x20000240

08004e58 <_fstat_r>:
 8004e58:	b538      	push	{r3, r4, r5, lr}
 8004e5a:	4d07      	ldr	r5, [pc, #28]	; (8004e78 <_fstat_r+0x20>)
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	4604      	mov	r4, r0
 8004e60:	4608      	mov	r0, r1
 8004e62:	4611      	mov	r1, r2
 8004e64:	602b      	str	r3, [r5, #0]
 8004e66:	f7fc f84b 	bl	8000f00 <_fstat>
 8004e6a:	1c43      	adds	r3, r0, #1
 8004e6c:	d102      	bne.n	8004e74 <_fstat_r+0x1c>
 8004e6e:	682b      	ldr	r3, [r5, #0]
 8004e70:	b103      	cbz	r3, 8004e74 <_fstat_r+0x1c>
 8004e72:	6023      	str	r3, [r4, #0]
 8004e74:	bd38      	pop	{r3, r4, r5, pc}
 8004e76:	bf00      	nop
 8004e78:	20000240 	.word	0x20000240

08004e7c <_isatty_r>:
 8004e7c:	b538      	push	{r3, r4, r5, lr}
 8004e7e:	4d06      	ldr	r5, [pc, #24]	; (8004e98 <_isatty_r+0x1c>)
 8004e80:	2300      	movs	r3, #0
 8004e82:	4604      	mov	r4, r0
 8004e84:	4608      	mov	r0, r1
 8004e86:	602b      	str	r3, [r5, #0]
 8004e88:	f7fc f84a 	bl	8000f20 <_isatty>
 8004e8c:	1c43      	adds	r3, r0, #1
 8004e8e:	d102      	bne.n	8004e96 <_isatty_r+0x1a>
 8004e90:	682b      	ldr	r3, [r5, #0]
 8004e92:	b103      	cbz	r3, 8004e96 <_isatty_r+0x1a>
 8004e94:	6023      	str	r3, [r4, #0]
 8004e96:	bd38      	pop	{r3, r4, r5, pc}
 8004e98:	20000240 	.word	0x20000240

08004e9c <_init>:
 8004e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e9e:	bf00      	nop
 8004ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ea2:	bc08      	pop	{r3}
 8004ea4:	469e      	mov	lr, r3
 8004ea6:	4770      	bx	lr

08004ea8 <_fini>:
 8004ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eaa:	bf00      	nop
 8004eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eae:	bc08      	pop	{r3}
 8004eb0:	469e      	mov	lr, r3
 8004eb2:	4770      	bx	lr
